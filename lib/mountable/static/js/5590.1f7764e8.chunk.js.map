{"version":3,"file":"static/js/5590.1f7764e8.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/withMapboxToken/MapboxTokenError.tsx","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/withMapboxToken/withMapboxToken.tsx","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/utils/jsonConverter.ts","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/utils/colors.ts","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/useDeckGl.tsx","../../../streamlit/frontend/lib/src/hooks/useStWidthHeight.ts","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/DeckGlJsonChart.tsx","../../../streamlit/frontend/lib/src/util/assertNever.ts","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts","../../../streamlit/frontend/lib/src/useBasicWidgetState.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport ErrorElement from \"@streamlit/lib/src/components/shared/ErrorElement\"\nimport { StyledInlineCode } from \"@streamlit/lib/src/components/elements/CodeBlock/styled-components\"\n\nimport {\n  MapboxTokenFetchingError,\n  MapboxTokenNotProvidedError,\n} from \"./withMapboxToken\"\n\ninterface Props {\n  error: Error | MapboxTokenFetchingError | MapboxTokenNotProvidedError\n  deltaType: string\n  width: number\n}\n\nconst MapboxTokenError = ({\n  error,\n  width,\n  deltaType,\n}: Props): ReactElement => {\n  if (error instanceof MapboxTokenNotProvidedError) {\n    return (\n      <ErrorElement\n        width={width}\n        name=\"No Mapbox token provided\"\n        message={\n          <>\n            <p>\n              To use <StyledInlineCode>st.{deltaType}</StyledInlineCode> or{\" \"}\n              <StyledInlineCode>st.map</StyledInlineCode> you need to set up a\n              Mapbox access token.\n            </p>\n\n            <p>\n              To get a token, create an account at{\" \"}\n              <a href=\"https://mapbox.com\">https://mapbox.com</a>. It's free\n              for moderate usage levels!\n            </p>\n\n            <p>\n              Once you have a token, just set it using the Streamlit config\n              option <StyledInlineCode>mapbox.token</StyledInlineCode> and\n              don't forget to restart your Streamlit server at this point if\n              it's still running, then reload this tab.\n            </p>\n\n            <p>\n              See{\" \"}\n              <a href=\"https://docs.streamlit.io/develop/api-reference/configuration/config.toml\">\n                our documentation\n              </a>{\" \"}\n              for more info on how to set config options.\n            </p>\n          </>\n        }\n      />\n    )\n  }\n\n  if (error instanceof MapboxTokenFetchingError) {\n    return (\n      <ErrorElement\n        width={width}\n        name=\"Error fetching Streamlit Mapbox token\"\n        message={\n          <>\n            <p>This app requires an internet connection.</p>\n            <p>Please check your connection and try again.</p>\n            <p>\n              If you think this is a bug, please file bug report{\" \"}\n              <a href=\"https://github.com/streamlit/streamlit/issues/new/choose\">\n                here\n              </a>\n              .\n            </p>\n          </>\n        }\n      />\n    )\n  }\n\n  return (\n    <ErrorElement\n      width={width}\n      name=\"Error fetching Streamlit Mapbox token\"\n      message={error.message}\n    />\n  )\n}\n\nexport default MapboxTokenError\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, PureComponent, ReactNode } from \"react\"\n\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\nimport axios from \"axios\"\n\nimport { ensureError } from \"@streamlit/lib/src/util/ErrorHandling\"\nimport {\n  DeckGlJsonChart,\n  Skeleton as SkeletonProto,\n} from \"@streamlit/lib/src/proto\"\nimport { Skeleton } from \"@streamlit/lib/src/components/elements/Skeleton\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\n\nimport MapboxTokenError from \"./MapboxTokenError\"\n\ninterface InjectedProps {\n  mapboxToken: string\n}\n\nexport interface State {\n  mapboxToken?: string\n  mapboxTokenError?: Error\n  isFetching: boolean\n}\n\n// Wraps a Component expecting a \"mapboxToken\" prop.\n// The wrapped Component accepts a DeckGLJsonChart prop, which\n// incorporates the config.toml token (if provided) and omits the \"mapboxToken\" prop.\nexport type WrappedMapboxProps<P extends InjectedProps> = Omit<\n  P,\n  \"mapboxToken\"\n> & {\n  element: DeckGlJsonChart\n  width: number\n}\n\nexport class MapboxTokenNotProvidedError extends Error {}\nexport class MapboxTokenFetchingError extends Error {}\n\n/**\n * A remote file that stores user-visible tokens.\n */\nexport const TOKENS_URL = \"https://data.streamlit.io/tokens.json\"\nconst MAPBOX = \"mapbox\"\n\n/**\n * A higher-order component that fetches our mapbox token and passes\n * it through to the wrapped component.\n * This component uses tokens from config.toml first when available.\n * If the token fetch fails, an error will be rendered in place of the wrapped component.\n * This component is necessary as it's good practice to separate data collection\n * (mapbox token retrieval) and the actual rendering of a component.\n *\n * @param {string} deltaType In case of an exception we show an error with this\n */\n\nconst withMapboxToken =\n  (deltaType: string) =>\n  <P extends InjectedProps>(\n    WrappedComponent: ComponentType<React.PropsWithChildren<P>>\n  ) => {\n    // Return a wrapper that accepts the wrapped component's props, minus\n    // \"mapboxToken\". The wrapper will fetch the mapboxToken and inject it into\n    // the wrapped component automatically.\n    class WithMapboxToken extends PureComponent<WrappedMapboxProps<P>, State> {\n      public static readonly displayName = `withMapboxToken(${\n        WrappedComponent.displayName || WrappedComponent.name\n      })`\n\n      static contextType = LibContext\n\n      context!: React.ContextType<typeof LibContext>\n\n      public constructor(props: WrappedMapboxProps<P>) {\n        super(props)\n\n        this.state = {\n          isFetching: true,\n          mapboxToken: undefined,\n          mapboxTokenError: undefined,\n        }\n      }\n\n      /**\n       * Fetch the remote \"tokens.json\" set the \"mapbox\" in state.\n       * Throw an error if we can't contact TOKENS_URL or the token is missing.\n       */\n      public initMapboxToken = async (): Promise<void> => {\n        try {\n          const response = await axios.get(TOKENS_URL)\n          const { [MAPBOX]: token } = response.data\n\n          if (!token) {\n            throw new Error(`Missing token ${MAPBOX}`)\n          }\n\n          this.setState({\n            mapboxToken: token,\n            isFetching: false,\n          })\n        } catch (e) {\n          const error = ensureError(e)\n\n          this.setState({\n            mapboxTokenError: error,\n            isFetching: false,\n          })\n          throw new MapboxTokenFetchingError(\n            `${error.message} (${TOKENS_URL})`\n          )\n        }\n      }\n\n      public componentDidMount(): void {\n        const mapboxToken =\n          this.props.element.mapboxToken || this.context.libConfig.mapboxToken\n\n        if (mapboxToken) {\n          this.setState({\n            mapboxToken,\n            isFetching: false,\n          })\n        } else {\n          this.initMapboxToken()\n        }\n      }\n\n      public render = (): ReactNode => {\n        const { mapboxToken, mapboxTokenError, isFetching } = this.state\n        const { width } = this.props\n\n        // We got an error when fetching our mapbox token: show the error.\n        if (mapboxTokenError) {\n          return (\n            <MapboxTokenError\n              width={width}\n              error={mapboxTokenError}\n              deltaType={deltaType}\n            />\n          )\n        }\n\n        // If our mapboxToken hasn't been retrieved yet, show a loading\n        // skeleton.\n        if (isFetching) {\n          return (\n            <Skeleton\n              element={SkeletonProto.create({\n                style: SkeletonProto.SkeletonStyle.ELEMENT,\n              })}\n            />\n          )\n        }\n\n        // We have the mapbox token. Pass it through to our component.\n        return (\n          // (this.props as unknown as P) is required to work around a TS issue:\n          // https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046\n          <WrappedComponent\n            {...(this.props as unknown as P)}\n            mapboxToken={mapboxToken}\n            width={width}\n          />\n        )\n      }\n    }\n\n    return hoistNonReactStatics(WithMapboxToken, WrappedComponent)\n  }\n\nexport default withMapboxToken\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nimport { hasLightBackgroundColor } from \"@streamlit/lib/src/theme\"\n\nexport interface StyledDeckGlChartProps {\n  width: number | string\n  height: number | string\n}\n\nexport const StyledDeckGlChart = styled.div<StyledDeckGlChartProps>(\n  ({ width, height }) => ({\n    position: \"relative\",\n    height,\n    width,\n  })\n)\n\nexport const StyledNavigationControlContainer = styled.div(({ theme }) => ({\n  position: \"absolute\",\n  right: \"2.625rem\",\n  top: theme.spacing.md,\n  zIndex: theme.zIndices.priority,\n\n  \".mapboxgl-ctrl.mapboxgl-ctrl-group\": {\n    // Ensures that the border-radius of the zoom buttons is visible\n    overflow: \"hidden\",\n    background: theme.colors.bgColor,\n  },\n\n  // Update zoom buttons based on the active theme\n  \"button:not(:disabled)\": {\n    background: theme.colors.bgColor,\n\n    // Add a separator between buttons\n    \"& + button\": {\n      borderTopColor: theme.colors.secondaryBg,\n    },\n\n    \"&.mapboxgl-ctrl-icon:hover\": {\n      backgroundColor: theme.colors.darkenedBgMix25,\n    },\n\n    // On dark backgrounds, invert the color for the + and - symbols\n    \"& span\": {\n      filter: hasLightBackgroundColor(theme) ? \"\" : \"invert(100%)\",\n    },\n  },\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CARTO_LAYERS,\n  colorBins,\n  colorCategories,\n  colorContinuous,\n} from \"@deck.gl/carto\"\nimport * as layers from \"@deck.gl/layers\"\nimport { JSONConverter } from \"@deck.gl/json\"\nimport * as geoLayers from \"@deck.gl/geo-layers\"\nimport * as aggregationLayers from \"@deck.gl/aggregation-layers\"\nimport * as meshLayers from \"@deck.gl/mesh-layers\"\n\nconst configuration = {\n  classes: {\n    ...layers,\n    ...aggregationLayers,\n    ...geoLayers,\n    ...meshLayers,\n    ...CARTO_LAYERS,\n  },\n  functions: {\n    colorBins,\n    colorCategories,\n    colorContinuous,\n  },\n}\n\nexport const jsonConverter = new JSONConverter({ configuration })\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as layers from \"@deck.gl/layers\"\nimport * as geoLayers from \"@deck.gl/geo-layers\"\nimport * as meshLayers from \"@deck.gl/mesh-layers\"\n\nimport { jsonConverter } from \"./jsonConverter\"\n\n/**\n * @file Utilities for determining fill colors for layers based on their\n *      selection state and the layer's selection color mode.\n */\n\n/**\n * Maps the \"@@type\" of a layer to the corresponding fill functions.\n *\n * Note that this mapping is not exhaustive and only includes the layers that we\n * can actually change the color of.\n */\nexport const LAYER_TYPE_TO_FILL_FUNCTION = {\n  [geoLayers.GeohashLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.H3ClusterLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.H3HexagonLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.MVTLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.QuadkeyLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.S2Layer.layerName]: [\"getFillColor\"],\n  [geoLayers.TripsLayer.layerName]: [\"getColor\"],\n  [layers.ArcLayer.layerName]: [\"getTargetColor\", \"getSourceColor\"],\n  [layers.ColumnLayer.layerName]: [\"getFillColor\"],\n  [layers.GeoJsonLayer.layerName]: [\"getFillColor\"],\n  [layers.IconLayer.layerName]: [\"getColor\"],\n  [layers.LineLayer.layerName]: [\"getColor\"],\n  [layers.PathLayer.layerName]: [\"getColor\"],\n  [layers.PointCloudLayer.layerName]: [\"getColor\"],\n  [layers.PolygonLayer.layerName]: [\"getFillColor\"],\n  [layers.ScatterplotLayer.layerName]: [\n    \"getFillColor\",\n    \"getColor\",\n    \"getLineColor\",\n  ],\n  [layers.SolidPolygonLayer.layerName]: [\"getFillColor\"],\n  [layers.TextLayer.layerName]: [\"getColor\"],\n  [meshLayers.ScenegraphLayer.layerName]: [\"getColor\"],\n  [meshLayers.SimpleMeshLayer.layerName]: [\"getColor\"],\n}\n\ntype SerializedColorValue = string | number\nexport type SerializedColorArray = [\n  SerializedColorValue?,\n  SerializedColorValue?,\n  SerializedColorValue?,\n  SerializedColorValue?\n]\n\ntype ObjectCallbackShape<T = unknown> = {\n  object: T\n  objectInfo: { index: number }\n}\n\nexport type FillFunction<T = unknown> = (\n  object: ObjectCallbackShape<T>[\"object\"],\n  objectInfo: ObjectCallbackShape<T>[\"objectInfo\"]\n) => SerializedColorArray | SerializedColorValue\n\ntype FillFunctionArgs<T = unknown> = ObjectCallbackShape<T> & {\n  originalFillFunction: FillFunction<T> | undefined\n}\n\n/**\n * Retrieves the original color in a standardized format by evaluating functions\n * if necessary.\n */\nconst getOriginalColor = ({\n  object,\n  objectInfo,\n  originalFillFunction,\n}: FillFunctionArgs): SerializedColorArray | null => {\n  const originalColor =\n    typeof originalFillFunction === \"function\"\n      ? originalFillFunction(object, objectInfo)\n      : originalFillFunction\n\n  if (Array.isArray(originalColor)) {\n    return [\n      originalColor[0] || 0,\n      originalColor[1] || 0,\n      originalColor[2] || 0,\n      originalColor[3] || 255,\n    ]\n  }\n\n  if (typeof originalColor === \"string\" && originalColor.startsWith(\"@@=\")) {\n    // @see https://deck.gl/docs/api-reference/json/conversion-reference#functions-and-using-the--prefix\n\n    const evaluated = jsonConverter\n      .convert({ originalColor })\n      .originalColor(object)\n\n    return [\n      evaluated[0] || 0,\n      evaluated[1] || 0,\n      evaluated[2] || 0,\n      evaluated[3] || 255,\n    ]\n  }\n\n  return null\n}\n\n/**\n * Calculates the original color with the applied opacity based on the selection\n * mode.\n *\n * @param {boolean} isSelected - Indicates if the object is selected.\n * @param {number} opacity - The opacity to apply.\n * @param {object} object - The object for which the color is being calculated.\n * @param {object} objectInfo - Additional information about the object.\n * @param {Function} originalFillFunction - The function to get the original\n * fill color.\n * @returns {SerializedColorArray | null} The color with the applied opacity or\n * null if the original color is not available.\n */\nconst getOriginalColorWithAppliedOpacity = ({\n  isSelected,\n  object,\n  objectInfo,\n  opacity,\n  originalFillFunction,\n}: {\n  isSelected: boolean\n  opacity: number\n} & FillFunctionArgs): SerializedColorArray | null => {\n  const originalColor = getOriginalColor({\n    object,\n    objectInfo,\n    originalFillFunction,\n  })\n\n  if (!originalColor) {\n    return null\n  }\n\n  let calculatedOpacity = 0\n\n  if (isSelected) {\n    // Some layers will have objects where the opacity is lower than the default\n    // selected opacity In this case, we want to use the higher opacity so that\n    // the differentiation between selected and unselected objects is more\n    // pronounced\n    calculatedOpacity = Math.max(\n      typeof originalColor[3] === \"number\" ? originalColor[3] : opacity,\n      opacity\n    )\n  } else {\n    // Some layers will have objects where the opacity is lower than the default\n    // unselected opacity In this case, we want to use the lower opacity so that\n    // we aren't raising the visibility of objects unnecessarily\n    calculatedOpacity = Math.min(\n      typeof originalColor[3] === \"number\" ? originalColor[3] : opacity,\n      opacity\n    )\n  }\n\n  return [\n    originalColor[0] || 0,\n    originalColor[1] || 0,\n    originalColor[2] || 0,\n    calculatedOpacity,\n  ]\n}\n\n/**\n * Determines the fill color for an object based on its selection state and the\n * layer's selection color mode.\n */\nexport const getContextualFillColor = ({\n  isSelected,\n  object,\n  objectInfo,\n  originalFillFunction,\n  selectedColor,\n  selectedOpacity = 255,\n  unselectedColor,\n  unselectedOpacity = Math.floor(255 * 0.4),\n}: {\n  isSelected: boolean\n  /** Fallback color in case there are issues in parsing the color for the current object */\n  selectedColor: SerializedColorArray\n  /** How much opacity should be applied to the selected item. Defaults to 100% */\n  selectedOpacity?: number\n  /** Fallback color in case there are issues in parsing the color for the current object */\n  unselectedColor: SerializedColorArray\n  /** How much opacity should be applied to the not selected items. Defaults to 40% */\n  unselectedOpacity?: number\n} & FillFunctionArgs): SerializedColorArray | SerializedColorValue => {\n  if (isSelected) {\n    return (\n      getOriginalColorWithAppliedOpacity({\n        opacity: selectedOpacity,\n        isSelected: true,\n        object,\n        objectInfo,\n        originalFillFunction,\n      }) || selectedColor\n    )\n  }\n\n  return (\n    getOriginalColorWithAppliedOpacity({\n      opacity: unselectedOpacity,\n      isSelected: false,\n      object,\n      objectInfo,\n      originalFillFunction,\n    }) || unselectedColor\n  )\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\n\nimport JSON5 from \"json5\"\nimport { PickingInfo, ViewStateChangeParameters } from \"@deck.gl/core\"\nimport isEqual from \"lodash/isEqual\"\nimport { TooltipContent } from \"@deck.gl/core/dist/lib/tooltip\"\nimport { parseToRgba } from \"color2k\"\n\nimport { useStWidthHeight } from \"@streamlit/lib/src/hooks/useStWidthHeight\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { DeckGlJsonChart as DeckGlJsonChartProto } from \"@streamlit/lib/src/proto\"\nimport {\n  useBasicWidgetClientState,\n  ValueWithSource,\n} from \"@streamlit/lib/src/useBasicWidgetState\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { useRequiredContext } from \"@streamlit/lib/src/hooks/useRequiredContext\"\nimport { ElementFullscreenContext } from \"@streamlit/lib/src/components/shared/ElementFullscreen/ElementFullscreenContext\"\n\nimport type {\n  DeckGlElementState,\n  DeckGLProps,\n  DeckObject,\n  ParsedDeckGlConfig,\n} from \"./types\"\nimport { jsonConverter } from \"./utils/jsonConverter\"\nimport {\n  FillFunction,\n  getContextualFillColor,\n  LAYER_TYPE_TO_FILL_FUNCTION,\n} from \"./utils/colors\"\n\ntype UseDeckGlShape = {\n  createTooltip: (info: PickingInfo | null) => TooltipContent\n  data: DeckGlElementState\n  deck: DeckObject\n  hasActiveSelection: boolean\n  height: number | string\n  isSelectionModeActivated: boolean\n  onViewStateChange: (params: ViewStateChangeParameters) => void\n  selectionMode: DeckGlJsonChartProto.SelectionMode | undefined\n  setSelection: React.Dispatch<\n    React.SetStateAction<ValueWithSource<DeckGlElementState> | null>\n  >\n  viewState: Record<string, unknown>\n  width: number | string\n}\n\nexport type UseDeckGlProps = Omit<DeckGLProps, \"mapboxToken\"> & {\n  isLightTheme: boolean\n  theme: EmotionTheme\n}\n\nconst DEFAULT_DECK_GL_HEIGHT = 500\n\nexport const EMPTY_STATE: DeckGlElementState = {\n  selection: {\n    indices: {},\n    objects: {},\n  },\n}\n\n/**\n * Interpolates variables within a string using values from a PickingInfo object.\n *\n * This function searches for placeholders in the format `{variable}` within the provided\n * string `body` and replaces them with corresponding values from the `info` object.\n * It first checks if the variable exists directly on `info.object`, and if not, it checks\n * within `info.object.properties`.\n *\n * @param {PickingInfo} info - The object containing the data to interpolate into the string.\n * @param {string} body - The string containing placeholders in the format `{variable}`.\n * @returns {string} - The interpolated string with placeholders replaced by actual values.\n */\nconst interpolate = (info: PickingInfo, body: string): string => {\n  const matchedVariables = body.match(/{(.*?)}/g)\n  if (matchedVariables) {\n    matchedVariables.forEach((match: string) => {\n      const variable = match.substring(1, match.length - 1)\n\n      if (info.object.hasOwnProperty(variable)) {\n        body = body.replace(match, info.object[variable])\n      } else if (\n        info.object.hasOwnProperty(\"properties\") &&\n        info.object.properties.hasOwnProperty(variable)\n      ) {\n        body = body.replace(match, info.object.properties[variable])\n      }\n    })\n  }\n  return body\n}\n\nfunction getDefaultState(\n  widgetMgr: WidgetStateManager,\n  element: DeckGlJsonChartProto\n): DeckGlElementState {\n  if (!element.id) {\n    return EMPTY_STATE\n  }\n\n  const initialFigureState = widgetMgr.getElementState(element.id, \"selection\")\n\n  return initialFigureState ?? EMPTY_STATE\n}\n\nfunction getStateFromWidgetMgr(\n  widgetMgr: WidgetStateManager,\n  element: DeckGlJsonChartProto\n): DeckGlElementState {\n  if (!element.id) {\n    return EMPTY_STATE\n  }\n\n  const stringValue = widgetMgr.getStringValue(element)\n  const currState: DeckGlElementState | null = stringValue\n    ? JSON5.parse(stringValue)\n    : null\n\n  return currState ?? EMPTY_STATE\n}\n\nfunction updateWidgetMgrState(\n  element: DeckGlJsonChartProto,\n  widgetMgr: WidgetStateManager,\n  vws: ValueWithSource<DeckGlElementState>,\n  fragmentId?: string\n): void {\n  if (!element.id) {\n    return\n  }\n\n  widgetMgr.setStringValue(\n    element,\n    JSON.stringify(vws.value),\n    { fromUi: vws.fromUi },\n    fragmentId\n  )\n}\n\nexport const useDeckGl = (props: UseDeckGlProps): UseDeckGlShape => {\n  const {\n    height: propsHeight,\n    width: propsWidth,\n    expanded: propsIsFullScreen,\n  } = useRequiredContext(ElementFullscreenContext)\n\n  const { element, fragmentId, isLightTheme, theme, widgetMgr } = props\n  const {\n    selectionMode: allSelectionModes,\n    tooltip,\n    useContainerWidth: shouldUseContainerWidth,\n  } = element\n  const isFullScreen = propsIsFullScreen ?? false\n\n  const [data, setSelection] = useBasicWidgetClientState<\n    DeckGlElementState,\n    DeckGlJsonChartProto\n  >({\n    element,\n    getDefaultState,\n    getStateFromWidgetMgr,\n    updateWidgetMgrState,\n    widgetMgr,\n    fragmentId,\n  })\n\n  const [viewState, setViewState] = useState<Record<string, unknown>>({\n    bearing: 0,\n    pitch: 0,\n    zoom: 11,\n  })\n\n  const { height, width } = useStWidthHeight({\n    element,\n    isFullScreen,\n    shouldUseContainerWidth,\n    container: { height: propsHeight, width: propsWidth },\n    heightFallback:\n      (viewState.initialViewState as { height: number } | undefined)?.height ||\n      DEFAULT_DECK_GL_HEIGHT,\n  })\n\n  const [initialViewState, setInitialViewState] = useState<\n    Record<string, unknown>\n  >({})\n\n  /**\n   * Our proto for selectionMode is an array in order to support future-looking\n   * functionality. Currently, we only support 1 single selection mode, so we'll\n   * only use the first one (if it exists) to determine our selection mode.\n   *\n   * @see deck_gl_json_chart.py #parse_selection_mode\n   */\n  const selectionMode: DeckGlJsonChartProto.SelectionMode | undefined =\n    allSelectionModes[0]\n  const isSelectionModeActivated = selectionMode !== undefined\n\n  const hasActiveSelection =\n    isSelectionModeActivated && Object.keys(data.selection.indices).length > 0\n\n  const parsedPydeckJson = useMemo(() => {\n    return Object.freeze(JSON5.parse<ParsedDeckGlConfig>(element.json))\n    // Only parse JSON when transitioning to/from fullscreen, the json changes, or theme changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFullScreen, isLightTheme, element.json])\n\n  const deck = useMemo<DeckObject>(() => {\n    const copy = { ...parsedPydeckJson }\n\n    // If unset, use either the Mapbox light or dark style based on Streamlit's theme\n    // For Mapbox styles, see https://docs.mapbox.com/api/maps/styles/#mapbox-styles\n    if (!copy.mapStyle) {\n      copy.mapStyle = `mapbox://styles/mapbox/${\n        isLightTheme ? \"light\" : \"dark\"\n      }-v9`\n    }\n\n    if (copy.layers) {\n      const anyLayersHaveSelection = Object.values(\n        data.selection.indices\n      ).some(layer => layer?.length)\n\n      const anyLayersHavePickableDefined = copy.layers.some(layer =>\n        Object.hasOwn(layer, \"pickable\")\n      )\n\n      copy.layers = copy.layers.map(layer => {\n        if (\n          !layer ||\n          Array.isArray(layer) ||\n          // If selection mode is not activated, do not make any additional changes to each layer\n          !isSelectionModeActivated\n        ) {\n          return layer\n        }\n\n        if (!anyLayersHavePickableDefined) {\n          // If selection mode is activated and no layers have pickable defined,\n          // set pickable to true for every layer. This is something Streamlit\n          // does to help make map selection easier to work with out of the box.\n          layer.pickable = true\n        }\n\n        const layerId = `${layer.id || null}`\n        const selectedIndices = data?.selection?.indices?.[layerId] || []\n\n        const fillFunctions = LAYER_TYPE_TO_FILL_FUNCTION[layer[\"@@type\"]]\n\n        if (!fillFunctions) {\n          return layer\n        }\n\n        const clonedLayer = { ...layer }\n        fillFunctions.forEach(fillFunction => {\n          clonedLayer.updateTriggers = {\n            // Tell Deck.gl to recompute the fill color when the selection changes.\n            // Without this, objects in layers will have stale colors when selection changes.\n            // @see https://deck.gl/docs/api-reference/core/layer#updatetriggers\n            [fillFunction]: [\n              ...(clonedLayer.updateTriggers?.[fillFunction] || []),\n              selectedIndices,\n              anyLayersHaveSelection,\n            ],\n          }\n\n          const shouldUseOriginalFillFunction = !anyLayersHaveSelection\n\n          const originalFillFunction = layer[fillFunction] as\n            | FillFunction\n            | undefined\n\n          if (shouldUseOriginalFillFunction || !originalFillFunction) {\n            // If we aren't changing the fill color, we don't need to change the fillFunction\n            return clonedLayer\n          }\n\n          const selectedOpacity = 255\n          const unselectedOpacity = Math.floor(255 * 0.4)\n\n          // Fallback colors in case there are issues while parsing the colors for a given object\n          const selectedColorParsed = parseToRgba(theme.colors.primary)\n          const selectedColor: [number, number, number, number] = [\n            selectedColorParsed[0],\n            selectedColorParsed[1],\n            selectedColorParsed[2],\n            selectedOpacity,\n          ]\n          const unselectedColorParsed = parseToRgba(theme.colors.gray20)\n          const unselectedColor: [number, number, number, number] = [\n            unselectedColorParsed[0],\n            unselectedColorParsed[1],\n            unselectedColorParsed[2],\n            unselectedOpacity,\n          ]\n\n          const newFillFunction: FillFunction = (object, objectInfo) => {\n            return getContextualFillColor({\n              isSelected: selectedIndices.includes(objectInfo.index),\n              object,\n              objectInfo,\n              originalFillFunction,\n              selectedColor,\n              unselectedColor,\n              selectedOpacity,\n              unselectedOpacity,\n            })\n          }\n\n          clonedLayer[fillFunction] = newFillFunction\n        })\n\n        return clonedLayer\n      })\n    }\n\n    delete copy?.views // We are not using views. This avoids a console warning.\n\n    return jsonConverter.convert(copy)\n  }, [\n    data.selection.indices,\n    isLightTheme,\n    isSelectionModeActivated,\n    parsedPydeckJson,\n    theme.colors.gray20,\n    theme.colors.primary,\n  ])\n\n  useEffect(() => {\n    // If the ViewState on the server has changed, apply the diff to the current state\n    if (!isEqual(deck.initialViewState, initialViewState)) {\n      const diff = Object.keys(deck.initialViewState).reduce(\n        (diff, key): any => {\n          // @ts-expect-error\n          if (deck.initialViewState[key] === initialViewState[key]) {\n            return diff\n          }\n\n          return {\n            ...diff,\n            // @ts-expect-error\n            [key]: deck.initialViewState[key],\n          }\n        },\n        {}\n      )\n\n      setViewState({ ...viewState, ...diff })\n      setInitialViewState(deck.initialViewState)\n    }\n  }, [deck.initialViewState, initialViewState, viewState])\n\n  const createTooltip = useCallback(\n    (info: PickingInfo | null): TooltipContent => {\n      if (!info || !info.object || !tooltip) {\n        return null\n      }\n\n      const parsedTooltip = JSON5.parse(tooltip)\n\n      if (parsedTooltip.html) {\n        parsedTooltip.html = interpolate(info, parsedTooltip.html)\n      } else {\n        parsedTooltip.text = interpolate(info, parsedTooltip.text)\n      }\n\n      return parsedTooltip\n    },\n    [tooltip]\n  )\n\n  const onViewStateChange = useCallback(\n    ({ viewState }: ViewStateChangeParameters) => {\n      setViewState(viewState)\n    },\n    [setViewState]\n  )\n\n  return {\n    createTooltip,\n    data,\n    deck,\n    hasActiveSelection,\n    height,\n    isSelectionModeActivated,\n    onViewStateChange,\n    selectionMode,\n    setSelection,\n    viewState,\n    width,\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CSSProperties, useMemo } from \"react\"\n\ntype StWidthHeightArgs = {\n  container: {\n    height?: CSSProperties[\"height\"]\n    width?: CSSProperties[\"width\"]\n  }\n  element: {\n    height?: CSSProperties[\"height\"]\n    width?: CSSProperties[\"width\"]\n  }\n  heightFallback?: CSSProperties[\"height\"]\n  isFullScreen: boolean\n  shouldUseContainerWidth: boolean\n  widthFallback?: CSSProperties[\"width\"]\n}\n\ntype StWidthHeightShape = {\n  height: number | string\n  width: number | string\n}\n\n/**\n * Determines the width and height to use for a given element based on the\n * Streamlit conditions in which it's being rendered.\n *\n * @returns {Object} An object with `width` and `height` properties.\n */\nexport const useStWidthHeight = ({\n  container,\n  element,\n  heightFallback = \"auto\",\n  isFullScreen,\n  shouldUseContainerWidth,\n  widthFallback = \"auto\",\n}: StWidthHeightArgs): StWidthHeightShape => {\n  const width = useMemo(() => {\n    if (shouldUseContainerWidth || isFullScreen) {\n      return \"100%\"\n    }\n    return element.width || container.width || widthFallback\n  }, [\n    container.width,\n    element.width,\n    isFullScreen,\n    shouldUseContainerWidth,\n    widthFallback,\n  ])\n\n  const height = useMemo(() => {\n    if (isFullScreen && container.height) {\n      return container.height\n    }\n\n    return element.height || container.height || heightFallback\n  }, [isFullScreen, element.height, container.height, heightFallback])\n\n  return { width, height }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { FC, useCallback, useEffect, useState } from \"react\"\n\nimport { DeckGL } from \"@deck.gl/react\"\nimport { MapContext, NavigationControl, StaticMap } from \"react-map-gl\"\nimport { CSVLoader } from \"@loaders.gl/csv\"\nimport { GLTFLoader } from \"@loaders.gl/gltf\"\nimport { registerLoaders } from \"@loaders.gl/core\"\nimport { LayersList, PickingInfo } from \"@deck.gl/core\"\nimport { useTheme } from \"@emotion/react\"\nimport { Close } from \"@emotion-icons/material-outlined\"\n\nimport {\n  EmotionTheme,\n  hasLightBackgroundColor,\n} from \"@streamlit/lib/src/theme\"\nimport { DeckGlJsonChart as DeckGlJsonChartProto } from \"@streamlit/lib/src/proto\"\nimport { assertNever } from \"@streamlit/lib/src/util/assertNever\"\nimport Toolbar, {\n  ToolbarAction,\n} from \"@streamlit/lib/src/components/shared/Toolbar\"\nimport { useRequiredContext } from \"@streamlit/lib/src/hooks/useRequiredContext\"\nimport { ElementFullscreenContext } from \"@streamlit/lib/src/components/shared/ElementFullscreen/ElementFullscreenContext\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\n\nimport withMapboxToken from \"./withMapboxToken\"\nimport {\n  StyledDeckGlChart,\n  StyledNavigationControlContainer,\n} from \"./styled-components\"\nimport type { DeckGlElementState, DeckGLProps } from \"./types\"\nimport { EMPTY_STATE, useDeckGl } from \"./useDeckGl\"\n\nimport \"mapbox-gl/dist/mapbox-gl.css\"\n\nregisterLoaders([CSVLoader, GLTFLoader])\n\nconst EMPTY_SELECTION = EMPTY_STATE.selection\n\nconst EMPTY_LAYERS: LayersList = []\n\nexport const DeckGlJsonChart: FC<DeckGLProps> = props => {\n  const {\n    disabled,\n    disableFullscreenMode,\n    element,\n    fragmentId,\n    mapboxToken: propsMapboxToken,\n    widgetMgr,\n  } = props\n  const { mapboxToken: elementMapboxToken } = element\n  const theme: EmotionTheme = useTheme()\n  const {\n    expanded: isFullScreen,\n    expand,\n    collapse,\n  } = useRequiredContext(ElementFullscreenContext)\n\n  const {\n    createTooltip,\n    data: selection,\n    deck,\n    hasActiveSelection,\n    height,\n    isSelectionModeActivated,\n    onViewStateChange,\n    selectionMode,\n    setSelection,\n    viewState,\n    width,\n  } = useDeckGl({\n    element,\n    fragmentId,\n    isLightTheme: hasLightBackgroundColor(theme),\n    theme,\n    widgetMgr,\n  })\n\n  const [isInitialized, setIsInitialized] = useState(false)\n\n  useEffect(() => {\n    // HACK: Load layers a little after loading the map, to hack around a bug\n    // where HexagonLayers were not drawing on first load but did load when the\n    // script got re-executed.\n    setIsInitialized(true)\n  }, [])\n\n  const handleClick = useCallback(\n    (info: PickingInfo) => {\n      if (selectionMode === undefined) {\n        // Safety check\n        return\n      }\n\n      const { index, object } = info\n\n      const layerId = `${info.layer?.id || null}`\n      const currState = selection\n      /** true if a user clicked outside of any layer */\n      const isResetClick = index === -1\n\n      const getSelection = (): DeckGlElementState[\"selection\"] => {\n        if (isResetClick) {\n          return EMPTY_SELECTION\n        }\n\n        switch (selectionMode) {\n          case DeckGlJsonChartProto.SelectionMode.SINGLE_OBJECT: {\n            if (currState.selection.indices[layerId]?.[0] === index) {\n              // Unselect the index\n              return EMPTY_SELECTION\n            }\n\n            return {\n              indices: { [`${layerId}`]: [index] },\n              objects: { [`${layerId}`]: [object] },\n            }\n          }\n          case DeckGlJsonChartProto.SelectionMode.MULTI_OBJECT: {\n            const selectionMap: Map<number, unknown> = new Map(\n              ((): [number, unknown][] => {\n                const indices = currState?.selection?.indices?.[layerId] || []\n\n                return indices.map((index, i) => [\n                  index,\n                  currState.selection?.objects?.[layerId]?.[i],\n                ])\n              })()\n            )\n\n            if (selectionMap.has(index)) {\n              // Unselect an existing index\n              selectionMap.delete(index)\n            } else {\n              // Add the newly selected index\n              selectionMap.set(index, object)\n            }\n\n            if (selectionMap.size === 0) {\n              // If the layer has nothing selected, remove the layer from the returned value\n              // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-unused-vars\n              const { [layerId]: _, ...restIndices } =\n                currState.selection.indices\n              // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-unused-vars\n              const { [layerId]: __, ...restObjects } =\n                currState.selection.objects\n\n              return {\n                indices: restIndices,\n                objects: restObjects,\n              }\n            }\n\n            return {\n              indices: {\n                ...currState.selection.indices,\n                [`${layerId}`]: Array.from(selectionMap.keys()),\n              },\n              objects: {\n                ...currState.selection.objects,\n                [`${layerId}`]: Array.from(selectionMap.values()),\n              },\n            }\n          }\n          default:\n            assertNever(selectionMode)\n            throw new Error(\"Invalid selection mode\")\n        }\n      }\n\n      const newSelection = getSelection()\n\n      if (\n        JSON.stringify(newSelection) === JSON.stringify(currState.selection)\n      ) {\n        // If the new selection is the same as the current selection, do\n        // nothing, and do not trigger a re-run\n        return\n      }\n\n      setSelection({\n        fromUi: true,\n        value: { selection: newSelection },\n      })\n    },\n    [selectionMode, selection, setSelection]\n  )\n\n  const handleClearSelectionClick = useCallback(() => {\n    setSelection({\n      value: { selection: EMPTY_SELECTION },\n      fromUi: true,\n    })\n  }, [setSelection])\n\n  return (\n    <StyledDeckGlChart\n      className=\"stDeckGlJsonChart\"\n      data-testid=\"stDeckGlJsonChart\"\n      width={width}\n      height={height}\n    >\n      <Toolbar\n        isFullScreen={isFullScreen}\n        disableFullscreenMode={disableFullscreenMode}\n        onExpand={expand}\n        onCollapse={collapse}\n        target={StyledDeckGlChart}\n        locked={hasActiveSelection && !disabled ? true : undefined}\n      >\n        {hasActiveSelection && !disabled && (\n          <ToolbarAction\n            label=\"Clear selection\"\n            onClick={handleClearSelectionClick}\n            icon={Close}\n          />\n        )}\n      </Toolbar>\n      <DeckGL\n        viewState={viewState}\n        onViewStateChange={onViewStateChange}\n        height={height}\n        width={width}\n        layers={isInitialized ? deck.layers : EMPTY_LAYERS}\n        getTooltip={createTooltip}\n        // @ts-expect-error There is a type mismatch due to our versions of the libraries\n        ContextProvider={MapContext.Provider}\n        controller\n        onClick={\n          isSelectionModeActivated && !disabled ? handleClick : undefined\n        }\n      >\n        <StaticMap\n          height={height}\n          width={width}\n          mapStyle={\n            deck.mapStyle &&\n            (typeof deck.mapStyle === \"string\"\n              ? deck.mapStyle\n              : deck.mapStyle[0])\n          }\n          mapboxApiAccessToken={elementMapboxToken || propsMapboxToken}\n        />\n        <StyledNavigationControlContainer>\n          <NavigationControl\n            data-testid=\"stDeckGlJsonChartZoomButton\"\n            showCompass={false}\n          />\n        </StyledNavigationControlContainer>\n      </DeckGL>\n    </StyledDeckGlChart>\n  )\n}\n\nexport default withFullScreenWrapper(\n  withMapboxToken(\"st.pydeck_chart\")(DeckGlJsonChart)\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Asserts that a given value is of type `never`. This function is useful for\n * ensuring exhaustive checks in TypeScript. If the function is called, it\n * throws an error indicating that a non-exhaustive branch was reached.\n *\n * @param {never} x - The value that should be of type `never`.\n * @throws {Error} Throws an error if a non-exhaustive branch is reached.\n * @returns {never} This function never returns a value.\n */\nexport const assertNever = (x: never): never => {\n  throw new Error(`Reached a branch with non-exhaustive item: ${x}`)\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect } from \"react\"\n\nimport { SignalConnection } from \"typed-signals\"\n\nimport {\n  isValidFormId,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly. Or just use the convenient\n   * hook `useFormClearHelper`, below.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      notNullOrUndefined(this.formClearListener) &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n\ninterface FormElementProtoInterface {\n  formId: string\n}\n\ninterface FormClearHelperArgs {\n  element: FormElementProtoInterface\n  widgetMgr: WidgetStateManager\n  onFormCleared: () => void\n}\n\nexport function useFormClearHelper({\n  element,\n  widgetMgr,\n  onFormCleared,\n}: FormClearHelperArgs): void {\n  useEffect(() => {\n    if (!isValidFormId(element.formId)) {\n      return\n    }\n\n    const formClearListener = widgetMgr.addFormClearedListener(\n      element.formId,\n      onFormCleared\n    )\n\n    return () => {\n      formClearListener.disconnect()\n    }\n  }, [element, widgetMgr, onFormCleared])\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\"\n\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { useFormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nexport type ValueWithSource<T> = {\n  value: T\n} & Source\n\n// Interface for a proto that has a .formId\ninterface ValueElementProtoInterface {\n  formId: string\n}\n\ninterface BaseArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getStateFromWidgetMgr: (wm: WidgetStateManager, el: P) => T | undefined\n  updateWidgetMgrState: (\n    el: P,\n    wm: WidgetStateManager,\n    vws: ValueWithSource<T>,\n    fragmentId?: string\n  ) => void\n  element: P\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n  onFormCleared?: () => void\n}\n\nexport interface UseBasicWidgetClientStateArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n> extends BaseArgs<T, P> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getDefaultState: (wm: WidgetStateManager, el: P) => T\n}\n\n/**\n * A React hook that makes the simplest kinds of widgets very easy to implement.\n * Use the clientState version when the widget does not have a .setValue on its\n * proto, otherwise utilize `useBasicWidgetState`.\n */\nexport function useBasicWidgetClientState<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n>({\n  getStateFromWidgetMgr,\n  getDefaultState,\n  updateWidgetMgrState,\n  element,\n  widgetMgr,\n  fragmentId,\n  onFormCleared,\n}: UseBasicWidgetClientStateArgs<T, P>): [\n  T,\n  Dispatch<SetStateAction<ValueWithSource<T> | null>>\n] {\n  const [currentValue, setCurrentValue] = useState<T>(() => {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value.\n    return (\n      getStateFromWidgetMgr(widgetMgr, element) ??\n      getDefaultState(widgetMgr, element)\n    )\n  })\n\n  // This acts as an \"event\":\n  // - It's null most of the time\n  // - It only has a value the moment when the user calls setValue (internally\n  //   called setNextValueWithSource). And then it's immediately set to null\n  //   internally.\n  const [nextValueWithSource, setNextValueWithSource] =\n    useState<ValueWithSource<T> | null>({\n      value: currentValue,\n      fromUi: false,\n    })\n\n  // When someone calls setNextValueWithSource, update internal state and tell\n  // widget manager to update its state too.\n  useEffect(() => {\n    if (isNullOrUndefined(nextValueWithSource)) return\n    setNextValueWithSource(null) // Clear \"event\".\n\n    setCurrentValue(nextValueWithSource.value)\n    updateWidgetMgrState(element, widgetMgr, nextValueWithSource, fragmentId)\n  }, [\n    nextValueWithSource,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n  ])\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  const handleFormCleared = useCallback((): void => {\n    setNextValueWithSource({\n      value: getDefaultState(widgetMgr, element),\n      fromUi: true,\n    })\n    onFormCleared?.()\n  }, [\n    setNextValueWithSource,\n    element,\n    getDefaultState,\n    widgetMgr,\n    onFormCleared,\n  ])\n\n  // Manage our form-clear event handler.\n  useFormClearHelper({ widgetMgr, element, onFormCleared: handleFormCleared })\n\n  return [currentValue, setNextValueWithSource]\n}\n\n// Interface for a proto that has a setValue, and .formId\ninterface ValueElementProtoInterfaceWithSetValue\n  extends ValueElementProtoInterface {\n  setValue: boolean\n}\n\nexport interface UseBasicWidgetStateArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterfaceWithSetValue // Proto for this widget.\n> extends BaseArgs<T, P> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getDefaultStateFromProto: (el: P) => T\n  getCurrStateFromProto: (el: P) => T\n}\n\n/**\n * A React hook that makes the simplest kinds of widgets very easy to implement.\n */\nexport function useBasicWidgetState<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterfaceWithSetValue // Proto for this widget.\n>({\n  getStateFromWidgetMgr,\n  getDefaultStateFromProto,\n  getCurrStateFromProto,\n  updateWidgetMgrState,\n  element,\n  widgetMgr,\n  fragmentId,\n  onFormCleared,\n}: UseBasicWidgetStateArgs<T, P>): [\n  T,\n  Dispatch<SetStateAction<ValueWithSource<T> | null>>\n] {\n  const getDefaultState = useCallback<(wm: WidgetStateManager, el: P) => T>(\n    (wm, el) => {\n      return getDefaultStateFromProto(el)\n    },\n    [getDefaultStateFromProto]\n  )\n\n  const [currentValue, setNextValueWithSource] = useBasicWidgetClientState({\n    getStateFromWidgetMgr,\n    getDefaultState,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n    onFormCleared,\n  })\n\n  // Respond to value changes via session_state. This is also set via an\n  // \"event\", this time using the .setValue property of the proto.\n  useEffect(() => {\n    if (!element.setValue) return\n    element.setValue = false // Clear \"event\".\n\n    setNextValueWithSource({\n      value: getCurrStateFromProto(element),\n      fromUi: false,\n    })\n  }, [element, getCurrStateFromProto, setNextValueWithSource])\n\n  return [currentValue, setNextValueWithSource]\n}\n"],"names":["_ref","error","width","deltaType","MapboxTokenNotProvidedError","_jsx","ErrorElement","name","message","_jsxs","_Fragment","children","StyledInlineCode","href","MapboxTokenFetchingError","Error","TOKENS_URL","MAPBOX","WrappedComponent","WithMapboxToken","PureComponent","constructor","props","super","context","initMapboxToken","async","response","axios","get","token","data","this","setState","mapboxToken","isFetching","e","ensureError","mapboxTokenError","render","state","MapboxTokenError","Skeleton","element","SkeletonProto","create","style","SkeletonStyle","ELEMENT","undefined","componentDidMount","libConfig","displayName","contextType","LibContext","hoistNonReactStatics","StyledDeckGlChart","_styled","target","height","position","StyledNavigationControlContainer","_ref2","theme","right","top","spacing","md","zIndex","zIndices","priority","overflow","background","colors","bgColor","borderTopColor","secondaryBg","backgroundColor","darkenedBgMix25","filter","hasLightBackgroundColor","configuration","classes","layers","geoLayers","CARTO_LAYERS","functions","colorBins","colorCategories","colorContinuous","jsonConverter","JSONConverter","LAYER_TYPE_TO_FILL_FUNCTION","layerName","meshLayers","getOriginalColorWithAppliedOpacity","isSelected","object","objectInfo","opacity","originalFillFunction","originalColor","Array","isArray","startsWith","evaluated","convert","getOriginalColor","calculatedOpacity","Math","max","min","EMPTY_STATE","selection","indices","objects","interpolate","info","body","matchedVariables","match","forEach","variable","substring","length","hasOwnProperty","replace","properties","getDefaultState","widgetMgr","id","initialFigureState","getElementState","getStateFromWidgetMgr","stringValue","getStringValue","currState","JSON5","parse","updateWidgetMgrState","vws","fragmentId","setStringValue","JSON","stringify","value","fromUi","useDeckGl","_viewState$initialVie","propsHeight","propsWidth","expanded","propsIsFullScreen","useRequiredContext","ElementFullscreenContext","isLightTheme","selectionMode","allSelectionModes","tooltip","useContainerWidth","shouldUseContainerWidth","isFullScreen","setSelection","useBasicWidgetClientState","viewState","setViewState","useState","bearing","pitch","zoom","container","heightFallback","widthFallback","useMemo","useStWidthHeight","initialViewState","setInitialViewState","isSelectionModeActivated","hasActiveSelection","Object","keys","parsedPydeckJson","freeze","json","deck","copy","mapStyle","anyLayersHaveSelection","values","some","layer","anyLayersHavePickableDefined","hasOwn","map","_data$selection","_data$selection$indic","pickable","layerId","selectedIndices","fillFunctions","clonedLayer","fillFunction","_clonedLayer$updateTr","updateTriggers","shouldUseOriginalFillFunction","unselectedOpacity","floor","selectedColorParsed","parseToRgba","primary","selectedColor","unselectedColorParsed","gray20","unselectedColor","newFillFunction","_ref3","selectedOpacity","getContextualFillColor","includes","index","views","useEffect","isEqual","diff","reduce","key","createTooltip","useCallback","parsedTooltip","html","text","onViewStateChange","registerLoaders","CSVLoader","GLTFLoader","EMPTY_SELECTION","EMPTY_LAYERS","withFullScreenWrapper","withMapboxToken","disabled","disableFullscreenMode","propsMapboxToken","elementMapboxToken","useTheme","expand","collapse","isInitialized","setIsInitialized","handleClick","_info$layer","isResetClick","newSelection","getSelection","DeckGlJsonChartProto","SelectionMode","SINGLE_OBJECT","_currState$selection$","MULTI_OBJECT","selectionMap","Map","_currState$selection","_currState$selection$2","i","_currState$selection2","_currState$selection3","_currState$selection4","has","delete","set","size","_","restIndices","__","restObjects","from","x","assertNever","handleClearSelectionClick","className","Toolbar","onExpand","onCollapse","locked","ToolbarAction","label","onClick","icon","Close","DeckGL","getTooltip","ContextProvider","MapContext","Provider","controller","StaticMap","mapboxApiAccessToken","NavigationControl","showCompass","FormClearHelper","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","formId","listener","notNullOrUndefined","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","useFormClearHelper","onFormCleared","currentValue","setCurrentValue","_getStateFromWidgetMg","nextValueWithSource","setNextValueWithSource","isNullOrUndefined","handleFormCleared","useBasicWidgetState","getDefaultStateFromProto","getCurrStateFromProto","wm","el","setValue"],"sourceRoot":""}