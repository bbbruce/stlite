{"version":3,"file":"index-B7CcPEoT.js","sources":["../../../streamlit/frontend/lib/src/components/widgets/Button/Button.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { memo, ReactElement } from \"react\"\n\nimport { Button as ButtonProto } from \"@streamlit/protobuf\"\n\nimport BaseButton, {\n  BaseButtonKind,\n  BaseButtonSize,\n  BaseButtonTooltip,\n  DynamicButtonLabel,\n} from \"~lib/components/shared/BaseButton\"\nimport { WidgetStateManager } from \"~lib/WidgetStateManager\"\nimport { Box } from \"~lib/components/shared/Base/styled-components\"\n\nexport interface Props {\n  disabled: boolean\n  element: ButtonProto\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n}\n\nfunction Button(props: Props): ReactElement {\n  const { disabled, element, widgetMgr, fragmentId } = props\n\n  let kind = BaseButtonKind.SECONDARY\n  if (element.type === \"primary\") {\n    kind = BaseButtonKind.PRIMARY\n  } else if (element.type === \"tertiary\") {\n    kind = BaseButtonKind.TERTIARY\n  }\n\n  return (\n    <Box className=\"stButton\" data-testid=\"stButton\">\n      <BaseButtonTooltip\n        help={element.help}\n        containerWidth={element.useContainerWidth}\n      >\n        <BaseButton\n          kind={kind}\n          size={BaseButtonSize.SMALL}\n          disabled={disabled}\n          containerWidth={element.useContainerWidth}\n          onClick={() =>\n            widgetMgr.setTriggerValue(element, { fromUi: true }, fragmentId)\n          }\n        >\n          <DynamicButtonLabel icon={element.icon} label={element.label} />\n        </BaseButton>\n      </BaseButtonTooltip>\n    </Box>\n  )\n}\n\nexport default memo(Button)\n"],"names":["Button","props","disabled","element","widgetMgr","fragmentId","kind","BaseButtonKind","SECONDARY","type","PRIMARY","TERTIARY","jsx","Box","BaseButtonTooltip","help","useContainerWidth","BaseButton","BaseButtonSize","SMALL","setTriggerValue","fromUi","DynamicButtonLabel","icon","label","memo"],"mappings":";AAoCA,SAASA,EAAOC,GAA4B;AACpC,QAAA;AAAA,IAAEC,UAAAA;AAAAA,IAAUC,SAAAA;AAAAA,IAASC,WAAAA;AAAAA,IAAWC,YAAAA;AAAAA,EAAAA,IAAeJ;AAErD,MAAIK,IAAOC,EAAeC;AACtBL,SAAAA,EAAQM,SAAS,YACnBH,IAAOC,EAAeG,UACbP,EAAQM,SAAS,eAC1BH,IAAOC,EAAeI,WAIrBC,gBAAAA,EAAAA,IAAAC,GAAA,EAAI,WAAU,YAAW,eAAY,YACpC,UAACD,gBAAAA,EAAAA,IAAAE,GAAA,EACC,MAAMX,EAAQY,MACd,gBAAgBZ,EAAQa,mBAExB,UAACJ,gBAAAA,EAAAA,IAAAK,GAAA,EACC,MAAAX,GACA,MAAMY,EAAeC,OACrB,UAAAjB,GACA,gBAAgBC,EAAQa,mBACxB,SAAS,MACPZ,EAAUgB,gBAAgBjB,GAAS;AAAA,IAAEkB,QAAQ;AAAA,EAAA,GAAQhB,CAAU,GAGjE,UAAAO,gBAAAA,EAAA,IAACU,GAAmB,EAAA,MAAMnB,EAAQoB,MAAM,OAAOpB,EAAQqB,MAAM,CAAA,EAC/D,CAAA,EACF,CAAA,GACF;AAEJ;AAEA,MAAeC,IAAAA,EAAAA,KAAKzB,CAAM;"}