{"version":3,"file":"index-DL-_ejf9.js","sources":["../../../streamlit/frontend/lib/src/components/elements/Video/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/Video/Video.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledVideoIframe = styled.iframe(({ theme }) => ({\n  colorScheme: \"normal\",\n  border: \"none\",\n  padding: theme.spacing.none,\n  margin: theme.spacing.none,\n  width: \"100%\",\n  aspectRatio: \"16 / 9\",\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n * Copyright (c) Yuichiro Tachibana (Tsuchiya) (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { memo, ReactElement, useEffect, useMemo, useRef } from \"react\"\n\nimport { getLogger } from \"loglevel\"\n\nimport { ISubtitleTrack, Video as VideoProto } from \"@streamlit/protobuf\"\n\nimport { StreamlitEndpoints } from \"~lib/StreamlitEndpoints\"\nimport { WidgetStateManager as ElementStateManager } from \"~lib/WidgetStateManager\"\n\nimport { useStliteMediaObjectUrl, useStliteMediaObjects } from \"@stlite/kernel\"\n\nimport { StyledVideoIframe } from \"./styled-components\"\n\nconst LOG = getLogger(\"Video\")\nexport interface VideoProps {\n  endpoints: StreamlitEndpoints\n  element: VideoProto\n  elementMgr: ElementStateManager\n}\n\nexport interface Subtitle {\n  label: string\n  url: string\n}\n\nconst VIDEO_STYLE = { width: \"100%\" }\n\nfunction Video({\n  element,\n  endpoints,\n  elementMgr,\n}: Readonly<VideoProps>): ReactElement {\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  /* Element may contain \"url\" or \"data\" property. */\n  const {\n    type,\n    url: rawUrl,\n    startTime,\n    subtitles: rawSubtitles,\n    endTime,\n    loop,\n    autoplay,\n    muted,\n  } = element\n  const url = useStliteMediaObjectUrl(rawUrl)\n  const subtitles = useStliteMediaObjects(rawSubtitles)\n\n  const preventAutoplay = useMemo<boolean>(() => {\n    if (!element.id) {\n      // Elements without an ID should never autoplay\n      return true\n    }\n\n    // Recover the state in case this component got unmounted\n    // and mounted again for the same element.\n    const preventAutoplay = elementMgr.getElementState(\n      element.id,\n      \"preventAutoplay\"\n    )\n\n    if (!preventAutoplay) {\n      // Set the state to prevent autoplay in case there is an unmount + mount\n      // for the same element.\n      elementMgr.setElementState(element.id, \"preventAutoplay\", true)\n    }\n    return preventAutoplay ?? false\n  }, [element.id, elementMgr])\n\n  // Create a stable dependency for checking subtitle source urls\n  const subtitleSrcArrString = useMemo(() => {\n    if (!subtitles) {\n      return JSON.stringify([])\n    }\n\n    return JSON.stringify(\n      subtitles.map(subtitle => endpoints.buildMediaURL(`${subtitle.url}`))\n    )\n  }, [subtitles, endpoints])\n\n  // Check the video's subtitles for load errors\n  useEffect(() => {\n    const subtitleSrcArr: string[] = JSON.parse(subtitleSrcArrString)\n    if (subtitleSrcArr.length === 0) return\n\n    // Since there is no onerror event for track elements, we can't use the onerror event\n    // to catch src url load errors. Catch with direct check instead.\n    subtitleSrcArr.forEach(subtitleSrc => {\n      endpoints.checkSourceUrlResponse(subtitleSrc, \"Video Subtitle\")\n    })\n  }, [subtitleSrcArrString, endpoints])\n\n  // Handle startTime changes\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.currentTime = startTime\n    }\n  }, [startTime])\n\n  useEffect(() => {\n    const videoNode = videoRef.current\n\n    const setStartTime: () => void = () => {\n      if (videoNode) {\n        videoNode.currentTime = element.startTime\n      }\n    }\n\n    if (videoNode) {\n      videoNode.addEventListener(\"loadedmetadata\", setStartTime)\n    }\n\n    return () => {\n      if (videoNode) {\n        videoNode.removeEventListener(\"loadedmetadata\", setStartTime)\n      }\n    }\n  }, [element])\n\n  // Stop the video at 'endTime' and handle loop\n  useEffect(() => {\n    const videoNode = videoRef.current\n    if (!videoNode) {\n      return\n    }\n\n    // Flag to avoid calling 'videoNode.pause()' multiple times\n    let stoppedByEndTime = false\n\n    const handleTimeUpdate = (): void => {\n      if (endTime > 0 && videoNode.currentTime >= endTime) {\n        if (loop) {\n          // If loop is true and we reached 'endTime', reset to 'startTime'\n          videoNode.currentTime = startTime || 0\n          videoNode.play()\n        } else if (!stoppedByEndTime) {\n          stoppedByEndTime = true\n          videoNode.pause()\n        }\n      }\n    }\n\n    if (endTime > 0) {\n      videoNode.addEventListener(\"timeupdate\", handleTimeUpdate)\n    }\n\n    return () => {\n      if (videoNode && endTime > 0) {\n        videoNode.removeEventListener(\"timeupdate\", handleTimeUpdate)\n      }\n    }\n  }, [endTime, loop, startTime])\n\n  // Handle looping the video\n  useEffect(() => {\n    const videoNode = videoRef.current\n    if (!videoNode) {\n      return\n    }\n\n    // Loop the video when it has ended\n    const handleVideoEnd = (): void => {\n      if (loop) {\n        videoNode.currentTime = startTime || 0 // Reset to startTime or to the start if not specified\n        videoNode.play()\n      }\n    }\n\n    videoNode.addEventListener(\"ended\", handleVideoEnd)\n\n    return () => {\n      if (videoNode) {\n        videoNode.removeEventListener(\"ended\", handleVideoEnd)\n      }\n    }\n  }, [loop, startTime])\n\n  const getYoutubeSrc = (url: string): string => {\n    const { startTime, endTime, loop, autoplay, muted } = element\n    const youtubeUrl = new URL(url)\n\n    if (startTime && !isNaN(startTime)) {\n      youtubeUrl.searchParams.append(\"start\", startTime.toString())\n    }\n\n    if (endTime && !isNaN(endTime)) {\n      youtubeUrl.searchParams.append(\"end\", endTime.toString())\n    }\n\n    if (loop) {\n      youtubeUrl.searchParams.append(\"loop\", \"1\")\n      // When using the loop parameter, YouTube requires the playlist parameter to be set to the same video ID\n      const videoId = youtubeUrl.pathname.split(\"/\").pop()\n\n      if (videoId) {\n        youtubeUrl.searchParams.append(\"playlist\", videoId)\n      }\n    }\n\n    if (autoplay) {\n      youtubeUrl.searchParams.append(\"autoplay\", \"1\")\n    }\n\n    if (muted) {\n      youtubeUrl.searchParams.append(\"mute\", \"1\")\n    }\n\n    return youtubeUrl.toString()\n  }\n\n  // Is this a YouTube link? If so we need a fancier tag.\n  // NOTE: This part assumes the URL is already an \"embed\" link.\n  if (type === VideoProto.Type.YOUTUBE_IFRAME) {\n    return (\n      <StyledVideoIframe\n        className=\"stVideo\"\n        data-testid=\"stVideo\"\n        title={url}\n        src={getYoutubeSrc(url)}\n        allow=\"autoplay; encrypted-media\"\n        allowFullScreen\n      />\n    )\n  }\n\n  const handleVideoError = (\n    e: React.SyntheticEvent<HTMLVideoElement>\n  ): void => {\n    const videoUrl = e.currentTarget.src\n    LOG.error(`Client Error: Video source error - ${videoUrl}`)\n    endpoints.sendClientErrorToHost(\n      \"Video\",\n      \"Video source failed to load\",\n      \"onerror triggered\",\n      videoUrl\n    )\n  }\n\n  // Only in dev mode we set crossOrigin to \"anonymous\" to avoid CORS issues\n  // when streamlit frontend and backend are running on different ports\n  return (\n    <video\n      className=\"stVideo\"\n      data-testid=\"stVideo\"\n      ref={videoRef}\n      controls\n      muted={muted}\n      autoPlay={autoplay && !preventAutoplay}\n      src={endpoints.buildMediaURL(url)}\n      style={VIDEO_STYLE}\n      crossOrigin={\n        process.env.NODE_ENV === \"development\" && subtitles.length > 0\n          ? \"anonymous\"\n          : undefined\n      }\n      onError={handleVideoError}\n    >\n      {subtitles &&\n        subtitles.map((subtitle: ISubtitleTrack, idx: number) => (\n          <track\n            // TODO: Update to match React best practices\n            // eslint-disable-next-line @eslint-react/no-array-index-key\n            key={idx}\n            kind=\"captions\"\n            src={endpoints.buildMediaURL(`${subtitle.url}`)}\n            label={`${subtitle.label}`}\n            default={idx === 0}\n            data-testid=\"stVideoSubtitle\"\n          />\n        ))}\n    </video>\n  )\n}\n\nexport default memo(Video)\n"],"names":["StyledVideoIframe","target","theme","colorScheme","border","padding","spacing","none","margin","width","aspectRatio","LOG","getLogger","VIDEO_STYLE","Video","element","endpoints","elementMgr","videoRef","useRef","type","url","rawUrl","startTime","subtitles","rawSubtitles","endTime","loop","autoplay","muted","useStliteMediaObjectUrl","useStliteMediaObjects","preventAutoplay","useMemo","id","getElementState","setElementState","subtitleSrcArrString","JSON","stringify","map","subtitle","buildMediaURL","useEffect","subtitleSrcArr","parse","length","forEach","subtitleSrc","checkSourceUrlResponse","current","currentTime","videoNode","setStartTime","addEventListener","removeEventListener","stoppedByEndTime","handleTimeUpdate","play","pause","handleVideoEnd","getYoutubeSrc","youtubeUrl","URL","isNaN","searchParams","append","toString","videoId","pathname","split","pop","VideoProto","Type","YOUTUBE_IFRAME","handleVideoError","e","videoUrl","currentTarget","src","error","sendClientErrorToHost","jsx","undefined","idx","label","memo"],"mappings":"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"}