{"version":3,"file":"index-Dosad71A.js","sources":["../../../streamlit/frontend/lib/src/components/elements/Spinner/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/Spinner/utils.ts","../../../streamlit/frontend/lib/src/components/elements/Spinner/Spinner.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport isPropValid from \"@emotion/is-prop-valid\"\nimport styled from \"@emotion/styled\"\nimport { Spinner } from \"baseui/spinner\"\n\nexport const ThemedStyledSpinner = styled(Spinner, {\n  shouldForwardProp: isPropValid,\n})(({ theme }) => {\n  return {\n    fontSize: theme.fontSizes.sm,\n    width: theme.sizes.spinnerSize,\n    height: theme.sizes.spinnerSize,\n    borderWidth: theme.sizes.spinnerThickness,\n    justifyContents: \"center\",\n    padding: theme.spacing.none,\n    margin: theme.spacing.none,\n    borderColor: theme.colors.borderColor,\n    borderTopColor: theme.colors.secondary,\n    flexGrow: 0,\n    flexShrink: 0,\n  }\n})\n\ninterface StyledSpinnerProps {\n  cache: boolean\n}\n\nexport const StyledSpinner = styled.div<StyledSpinnerProps>(\n  ({ theme, cache }) => ({\n    ...(cache\n      ? {\n          paddingBottom: theme.spacing.lg,\n          background: `linear-gradient(to bottom, ${theme.colors.bgColor} 0%, ${theme.colors.bgColor} 80%, transparent 100%)`,\n        }\n      : null),\n  })\n)\n\n// TODO: Maybe move this to `theme/consts.ts`, see\n// https://github.com/streamlit/streamlit/pull/10085/files#diff-a5cce939bf6c73209a258132c71ccb368a3a1fd57b68b373d242736adb920093\nexport const StyledSpinnerTimer = styled.div(({ theme }) => ({\n  opacity: 0.6,\n  fontSize: theme.fontSizes.sm,\n}))\n\nexport const StyledSpinnerContainer = styled.div(({ theme }) => ({\n  display: \"flex\",\n  gap: theme.spacing.sm,\n  alignItems: \"center\",\n  width: \"100%\",\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Formats a duration in seconds into a human-readable string.\n *\n * @param seconds - The duration in seconds to format\n * @returns A formatted string representation of the duration in parentheses\n *\n * @example\n * formatTime(1.1)    // \"(1.1 seconds)\"\n * formatTime(65.3)   // \"(1 minute, 5.3 seconds)\"\n * formatTime(3661.1) // \"(1 hour, 1 minute, 1.1 seconds)\"\n *\n * TODO: In the future, we might want to replace this with `Intl.DurationFormat` (see\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat).\n * But that API is not available on Firefox yet.\n */\nexport const formatTime = (seconds: number): string => {\n  const hours = Math.floor(seconds / 3600)\n  const mins = Math.floor((seconds % 3600) / 60)\n  const secs = seconds % 60\n\n  if (hours === 0 && mins === 0) {\n    return `(${secs.toFixed(1)} seconds)`\n  }\n\n  if (hours === 0) {\n    const minText = `${mins} minute${mins === 1 ? \"\" : \"s\"}`\n    const secText = secs === 0 ? \"\" : `, ${secs.toFixed(1)} seconds`\n    return `(${minText}${secText})`\n  }\n\n  const hourText = `${hours} hour${hours === 1 ? \"\" : \"s\"}`\n  const minText = mins === 0 ? \"\" : `, ${mins} minute${mins === 1 ? \"\" : \"s\"}`\n  const secText = secs === 0 ? \"\" : `, ${secs.toFixed(1)} seconds`\n  return `(${hourText}${minText}${secText})`\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { memo, ReactElement } from \"react\"\n\nimport classNames from \"classnames\"\n\nimport { Spinner as SpinnerProto } from \"@streamlit/protobuf\"\n\nimport StreamlitMarkdown from \"~lib/components/shared/StreamlitMarkdown\"\n\nimport {\n  StyledSpinner,\n  StyledSpinnerContainer,\n  StyledSpinnerTimer,\n  ThemedStyledSpinner,\n} from \"./styled-components\"\nimport { formatTime } from \"./utils\"\n\nexport interface SpinnerProps {\n  element: SpinnerProto\n}\n\nfunction Spinner({ element }: Readonly<SpinnerProps>): ReactElement {\n  const { cache, showTime } = element\n  const [elapsedTime, setElapsedTime] = React.useState(0)\n\n  React.useEffect(() => {\n    if (!showTime) return\n\n    const timer = setInterval(() => {\n      setElapsedTime(prev => prev + 0.1)\n    }, 100)\n\n    return () => clearInterval(timer)\n  }, [showTime])\n\n  return (\n    <StyledSpinner\n      className={classNames({ stSpinner: true, stCacheSpinner: cache })}\n      data-testid=\"stSpinner\"\n      cache={cache}\n    >\n      <StyledSpinnerContainer>\n        <ThemedStyledSpinner />\n        <StreamlitMarkdown source={element.text} allowHTML={false} />\n        {showTime && (\n          <StyledSpinnerTimer>{formatTime(elapsedTime)}</StyledSpinnerTimer>\n        )}\n      </StyledSpinnerContainer>\n    </StyledSpinner>\n  )\n}\n\nexport default memo(Spinner)\n"],"names":["ThemedStyledSpinner","Spinner","shouldForwardProp","isPropValid","target","theme","fontSize","fontSizes","sm","width","sizes","spinnerSize","height","borderWidth","spinnerThickness","justifyContents","padding","spacing","none","margin","borderColor","colors","borderTopColor","secondary","flexGrow","flexShrink","StyledSpinner","cache","paddingBottom","lg","background","bgColor","StyledSpinnerTimer","opacity","StyledSpinnerContainer","display","gap","alignItems","formatTime","seconds","hours","Math","floor","mins","secs","toFixed","minText","secText","hourText","element","showTime","elapsedTime","setElapsedTime","React","useState","useEffect","timer","setInterval","prev","clearInterval","jsx","classNames","stSpinner","stCacheSpinner","StreamlitMarkdown","text","memo"],"mappings":"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"}