{"version":3,"file":"worker-Dy6BsLcj.js","sources":["../../../node_modules/path-browserify/index.js","../../kernel/dist/file.js","../../common/src/requirements.ts","../../kernel/dist/pyodide-loader.js","../../kernel/dist/mock.js","../../kernel/dist/module-auto-load.js","../../kernel/dist/language-server/code_completion.js","../../kernel/dist/language-server/language-server-loader.js","../../kernel/dist/worker-runtime.js","../../kernel/dist/app-id.js","../../kernel/dist/worker.js"],"sourcesContent":["// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","import path from \"path-browserify\";\nexport const globalHomeDir = \"/home/pyodide\";\nexport const getAppHomeDir = (appId) => `${globalHomeDir}/${appId}`;\nexport const resolveAppPath = (appId, filePath) => {\n    if (appId == null) {\n        return path.resolve(globalHomeDir, filePath);\n    }\n    return path.resolve(getAppHomeDir(appId), filePath);\n};\nfunction ensureParent(pyodide, // XXX: This is a temporary workaround to fix the type error.\nfilePath) {\n    const normalized = path.normalize(filePath);\n    const dirPath = path.dirname(normalized);\n    const dirNames = dirPath.split(\"/\");\n    const chDirNames = [];\n    for (const dirName of dirNames) {\n        chDirNames.push(dirName);\n        const dirPath = chDirNames.join(\"/\");\n        if (pyodide.FS.analyzePath(dirPath).exists) {\n            if (pyodide.FS.isDir(dirPath)) {\n                throw new Error(`\"${dirPath}\" already exists and is not a directory.`);\n            }\n            continue;\n        }\n        try {\n            pyodide.FS.mkdir(dirPath);\n        }\n        catch (err) {\n            console.error(`Failed to create a directory \"${dirPath}\"`);\n            throw err;\n        }\n    }\n}\nexport function writeFileWithParents(pyodide, // XXX: This is a temporary workaround to fix the type error.\nfilePath, data, opts) {\n    ensureParent(pyodide, filePath);\n    pyodide.FS.writeFile(filePath, data, opts);\n}\nexport function renameWithParents(pyodide, // XXX: This is a temporary workaround to fix the type error.\noldPath, newPath) {\n    ensureParent(pyodide, newPath);\n    pyodide.FS.rename(oldPath, newPath);\n}\n//# sourceMappingURL=file.js.map","// Ref: https://peps.python.org/pep-0508/#grammar\nconst FIRST_CHAR_OF_EXTRAS = \"[\";\nconst FIRST_CHAR_OF_VERSIONSPEC = \"(<=>!~\";\nconst FIRST_CHAR_OF_QUOTED_MARKER = \";\";\nconst FIRST_CHAR_OF_URLSPEC = \"@\";\nconst RX_CHAR_FOLLOWING_NAME_WITHOUT_WSP = new RegExp(\n  `[${\n    FIRST_CHAR_OF_EXTRAS +\n    FIRST_CHAR_OF_VERSIONSPEC +\n    FIRST_CHAR_OF_QUOTED_MARKER +\n    FIRST_CHAR_OF_URLSPEC\n  }]`,\n);\nfunction getPackageName(req: string): string {\n  const parts = req.split(RX_CHAR_FOLLOWING_NAME_WITHOUT_WSP);\n  return parts[0].trim();\n}\n\nexport function validateRequirements(requirements: string[]): string[] {\n  requirements.forEach((req) => {\n    let url: URL;\n    try {\n      url = new URL(req);\n    } catch {\n      // `req` is not a URL -> OK\n      return;\n    }\n\n    // Ref: The scheme checker in the micropip implementation is https://github.com/pyodide/micropip/blob/v0.1.0/micropip/_compat_in_pyodide.py#L23-L26\n    if (url.protocol === \"emfs:\" || url.protocol === \"file:\") {\n      throw new Error(\n        `\"emfs:\" and \"file:\" protocols are not allowed for the requirement (${req})`,\n      );\n    }\n  });\n\n  const validatedRequirements = requirements.filter((req) => {\n    const isStreamlit = getPackageName(req) === \"streamlit\";\n    if (isStreamlit) {\n      console.warn(\n        `Streamlit is specified in the requirements (\"${req}\"), but it will be ignored. A built-in version of Streamlit will be used.`,\n      );\n      return false;\n    }\n\n    return true;\n  });\n\n  return validatedRequirements;\n}\n","/// <reference lib=\"WebWorker\" />\nexport async function resolvePyodideUrl(pyodideUrl) {\n    const isNode = typeof process !== \"undefined\" && process.versions?.node;\n    let sep;\n    if (isNode) {\n        const nodePath = await import(/* webpackIgnore: true */ \"node:path\");\n        sep = nodePath.sep;\n    }\n    else {\n        sep = \"/\"; // URL path separator\n    }\n    // Ref: https://github.com/jupyterlite/pyodide-kernel/blob/v0.1.3/packages/pyodide-kernel/src/kernel.ts#L55\n    const pyodideIndexURL = pyodideUrl.slice(0, pyodideUrl.lastIndexOf(sep) + 1);\n    // Ref: https://github.com/jupyterlite/pyodide-kernel/blob/v0.1.3/packages/pyodide-kernel/src/worker.ts#L40-L54\n    if (pyodideUrl.endsWith(\".mjs\")) {\n        if (isNode) {\n            // Special care for Node.js on Windows because the `file://` scheme is required in the URL passed to import() on Windows. See https://github.com/whitphx/stlite/issues/957\n            const nodePath = await import(/* webpackIgnore: true */ \"node:path\");\n            const nodeUrl = await import(/* webpackIgnore: true */ \"node:url\");\n            const possiblyLocalFilePath = !pyodideUrl.includes(\"://\");\n            if (possiblyLocalFilePath && nodePath.isAbsolute(pyodideUrl)) {\n                pyodideUrl = nodeUrl.pathToFileURL(pyodideUrl).href;\n            }\n        }\n        return {\n            scriptURL: pyodideUrl,\n            pyodideIndexURL,\n            isESModule: true,\n        };\n    }\n    else {\n        return {\n            scriptURL: pyodideUrl,\n            pyodideIndexURL,\n            isESModule: false,\n        };\n    }\n}\nexport async function initPyodide(pyodideUrl, loadPyodideOptions) {\n    const { scriptURL, pyodideIndexURL, isESModule } = await resolvePyodideUrl(pyodideUrl);\n    // Ref: https://github.com/jupyterlite/pyodide-kernel/blob/v0.1.3/packages/pyodide-kernel/src/worker.ts#L40-L54\n    let loadPyodide;\n    if (isESModule) {\n        // note: this does not work at all in firefox\n        const pyodideModule = await import(\n        /* webpackIgnore: true */ /* @vite-ignore */ scriptURL);\n        loadPyodide = pyodideModule.loadPyodide;\n    }\n    else {\n        importScripts(scriptURL);\n        loadPyodide = self.loadPyodide;\n    }\n    return loadPyodide({ ...loadPyodideOptions, indexURL: pyodideIndexURL });\n}\n//# sourceMappingURL=pyodide-loader.js.map","export function mockPyArrow(pyodide) {\n    pyodide.runPython(`\nimport micropip\nmicropip.add_mock_package(\n    \"pyarrow\", \"0.0.1\",\n    modules={\n        \"pyarrow\": \"\"\"\n__version__ = '0.0.1'  # TODO: Update when releasing\n\n\nclass Table:\n    @classmethod\n    def from_pandas(*args, **kwargs):\n        raise NotImplementedError(\"stlite is not supporting this method.\")\n\n\nclass Array:\n    def __init__(self, *args, **kwargs):\n        raise NotImplementedError(\"stlite is not supporting PyArrow.Array\")\n\n\nclass ChunkedArray:\n    def __init__(self, *args, **kwargs):\n        raise NotImplementedError(\"stlite is not supporting PyArrow.ChunkedArray\")\n\"\"\"\n    }\n)\n`);\n}\n//# sourceMappingURL=mock.js.map","function tryModuleAutoLoad(pyodide, callback, sources) {\n    // Ref: `pyodide.loadPackagesFromImports` (https://github.com/pyodide/pyodide/blob/0.26.0/src/js/api.ts#L191)\n    const pyodidePy = pyodide.pyimport(\"pyodide\");\n    const findImports = (source) => pyodidePy.code.find_imports(source).toJs();\n    const importsArr = sources.map((source) => findImports(source));\n    const imports = Array.from(new Set(importsArr.flat()));\n    const notFoundImports = imports.filter((name) => !pyodide.runPython(`__import__('importlib').util.find_spec('${name}')`));\n    const packagesToLoad = notFoundImports\n        .map((name) => pyodide._api._import_name_to_package_name.get(name))\n        .filter((name) => name);\n    if (packagesToLoad.length === 0) {\n        return Promise.resolve();\n    }\n    const packageLoadPromise = pyodide.loadPackage(packagesToLoad);\n    callback(packagesToLoad, packageLoadPromise);\n    return packageLoadPromise.then();\n}\nexport function dispatchModuleAutoLoading(pyodide, callback, sources) {\n    const autoLoadPromise = tryModuleAutoLoad(pyodide, callback, sources);\n    // `autoInstallPromise` will be awaited in the script_runner on the Python side.\n    const setModuleAutoLoadPromise = pyodide.runPython(`\ndef __set_module_auto_load_promise__(promise):\n    from streamlit.runtime.scriptrunner import script_runner\n    script_runner.moduleAutoLoadPromise = promise\n\n__set_module_auto_load_promise__`); // The last line evaluates to the function so it is returned from pyodide.runPython() to the JS side.\n    setModuleAutoLoadPromise(autoLoadPromise);\n}\n//# sourceMappingURL=module-auto-load.js.map","export const defineCodeCompletionsFunction = async (pyodide) => {\n    // Indentation is very important in python, don't change this!\n    await pyodide.runPythonAsync(`import jedi\nimport re\nimport json\nfrom typing import Dict\nfrom lsprotocol.types import (CompletionItem, CompletionList, CompletionItemKind, Position, Range, TextEdit)\nfrom lsprotocol import converters as lsp_converters\nfrom jedi.api.classes import Completion\n\ndef as_completion_item_kind(kind: str):\n  match kind:\n    case 'class':\n      return CompletionItemKind.Class\n    case 'function':\n      return CompletionItemKind.Function\n    case 'instance':\n      return CompletionItemKind.Reference\n    case 'keyword':\n      return CompletionItemKind.Keyword\n    case 'module':\n      return CompletionItemKind.Module\n    case 'param':\n      return CompletionItemKind.Variable\n    case 'path':\n      return CompletionItemKind.File\n    case 'property':\n      return CompletionItemKind.Property\n    case 'statement':\n      return CompletionItemKind.Variable\n    case _:\n      return CompletionItemKind.Text\n\ndef as_completion_item_sort_text(item: Completion) -> str:\n  \"\"\"Generate sorting text to arrange items alphabetically,\n  ensuring parameters are prioritized first\n  and private magic properties come last.\n  \"\"\"\n  completion_item_name = item.name\n  if completion_item_name is None or completion_item_name.startswith('_'):\n     return f\"zz{completion_item_name}\"\n  elif item.type == \"param\" and completion_item_name.endswith(\"=\"):\n     return f\"aa{completion_item_name}\"\n  else:\n      return f\"bb{completion_item_name}\"\n\ndef as_completion_item(completion: Completion, cursor_range: Range) -> Dict:\n  label = completion.name\n  return CompletionItem(\n      label=label,\n      filter_text=label,\n      sort_text=as_completion_item_sort_text(completion),\n      kind=as_completion_item_kind(completion.type),\n      documentation=completion.docstring(raw=True),\n      text_edit=TextEdit(range=cursor_range, new_text=label),\n  )\n\ndef get_text_edit_cursor_range(cursor_code_line: str, current_line_number: int, cursor_offset: int):\n  # Match the substring starting from cursor_offset ex: math<cursor>co, match co\n  matched_words = re.search(r'\\\\b\\\\w+\\\\b', cursor_code_line[cursor_offset :])\n\n  # Determine the length of the matched word characters\n  word_after_cursor_length = len(matched_words.group()) if matched_words else 0\n\n  # This will tell to code editors which text to edit/replace\n  return Range(\n    start=Position(\n        line=current_line_number, character=cursor_offset\n    ),\n    end=Position(\n        line=current_line_number,\n        character=cursor_offset + word_after_cursor_length,\n    ),\n  )\n\ndef get_code_completions(code: str, current_line_number: int, cursor_offset: int):\n\n  jedi_language_server = jedi.Script(code)\n\n  # jedi returns a zero-based array with lines\n  jedi_line_number_index = current_line_number -1\n\n  # In case if we are not getting any results back or the offset is wrong\n  # Just return empty list\n  if jedi_line_number_index >= len(jedi_language_server._code_lines):\n   return json.dumps({ \"items\": []})\n\n  jedi_completions_list = jedi_language_server.complete(\n      current_line_number,\n      cursor_offset,\n      fuzzy=False,\n  )\n\n  code_at_cursor = jedi_language_server._code_lines[jedi_line_number_index]\n  cursor_range = get_text_edit_cursor_range(code_at_cursor, current_line_number, cursor_offset)\n\n  # Convert jedi completion items as completion items compatible in language server\n  suggestions = CompletionList(\n    is_incomplete=False,\n    items=list(as_completion_item(completion, cursor_range) for completion in jedi_completions_list))\n\n  # Convert results to JSON so that we can use it in the worker\n  converter = lsp_converters.get_converter()\n  return json.dumps(converter.unstructure(suggestions, unstructure_as=CompletionList))\n`);\n};\nexport const getCodeCompletions = async (payload, pyodide) => {\n    let get_code_completions;\n    try {\n        // Get the proxy for get_code_completions in the JS world\n        get_code_completions = pyodide.globals.get(\"get_code_completions\");\n        if (!get_code_completions) {\n            console.error(\"Can not generate suggestions list, the get_code_completions function is not defined\");\n            return { items: [] };\n        }\n        // Then call it from JS\n        const result = get_code_completions(payload.code, payload.line, payload.column);\n        if (!result) {\n            return { items: [] };\n        }\n        return JSON.parse(result);\n    }\n    catch (err) {\n        console.error(err);\n        return { items: [] };\n    }\n    finally {\n        // Python objects must be manually destroyed when passed to Javascript\n        // or they will create a memory leak\n        // https://pyodide.org/en/0.16.1/type_conversions.html#python-from-javascript\n        if (get_code_completions &&\n            get_code_completions.constructor.name === \"PyProxy\") {\n            get_code_completions.destroy();\n        }\n    }\n};\n//# sourceMappingURL=code_completion.js.map","import { defineCodeCompletionsFunction } from \"./code_completion\";\n/**\n * Imports the necessary python packages to enable language server features\n */\nexport const importLanguageServerLibraries = async (pyodide, micropip) => {\n    try {\n        console.debug(\"Importing jedi Interpreter\");\n        await micropip.install.callKwargs([\"jedi\", \"lsprotocol\"], {\n            keep_going: true,\n        });\n        await defineCodeCompletionsFunction(pyodide);\n    }\n    catch (err) {\n        console.error(\"Error while importing jedi\", err);\n    }\n};\n//# sourceMappingURL=language-server-loader.js.map","/// <reference lib=\"WebWorker\" />\nimport { resolveAppPath, getAppHomeDir, writeFileWithParents, renameWithParents, } from \"./file\";\nimport { validateRequirements } from \"@stlite/common/src/requirements\";\nimport { initPyodide } from \"./pyodide-loader\";\nimport { mockPyArrow } from \"./mock\";\nimport { dispatchModuleAutoLoading, } from \"./module-auto-load\";\nimport { importLanguageServerLibraries } from \"./language-server/language-server-loader\";\nimport { getCodeCompletions } from \"./language-server/code_completion\";\nlet initPyodidePromise = null;\nasync function loadPyodideAndPackages(defaultPyodideUrl, appId, initData, onModuleAutoLoad, onProgress) {\n    const { entrypoint, files, archives, requirements: unvalidatedRequirements, prebuiltPackageNames: prebuiltPackages, wheels, pyodideUrl = defaultPyodideUrl, streamlitConfig, idbfsMountpoints, nodefsMountpoints, moduleAutoLoad, env, languageServer, } = initData;\n    const requirements = validateRequirements(unvalidatedRequirements); // Blocks the not allowed wheel URL schemes.\n    if (initPyodidePromise) {\n        onProgress(\"Pyodide is already loaded.\");\n        console.debug(\"Pyodide is already loaded.\");\n    }\n    else {\n        onProgress(\"Loading Pyodide.\");\n        console.debug(\"Loading Pyodide.\");\n        initPyodidePromise = initPyodide(pyodideUrl, {\n            stdout: console.log,\n            stderr: console.error,\n        });\n        if (wheels) {\n            // NOTE: It's important to install the user-specified requirements\n            // and the custom Streamlit and stlite wheels in the same `micropip.install` call below,\n            // which satisfies the following two requirements:\n            // 1. It allows users to specify the versions of Streamlit's dependencies via requirements.txt\n            // before these versions are automatically resolved by micropip when installing Streamlit from the custom wheel\n            // (installing the user-reqs must be earlier than or equal to installing the custom wheels).\n            // 2. It also resolves the `streamlit` package version required by the user-specified requirements to the appropriate version,\n            // which avoids the problem of https://github.com/whitphx/stlite/issues/675\n            // (installing the custom wheels must be earlier than or equal to installing the user-reqs).\n            requirements.unshift(wheels.streamlit);\n            requirements.unshift(wheels.stliteLib);\n        }\n        console.debug(\"Loaded Pyodide\");\n    }\n    const pyodide = // XXX: `{ FS: any }` is a temporary workaround to fix the type error.\n     await initPyodidePromise;\n    if (env) {\n        // We could've used the env parameter in pyodide initialization,\n        // but then some default environment variables like HOME were not set.\n        console.debug(\"Setting environment variables\", env);\n        const os = pyodide.pyimport(\"os\");\n        os.environ.update(pyodide.toPy(env));\n        console.debug(\"Set environment variables\", os.environ);\n    }\n    let useIdbfs = false;\n    if (idbfsMountpoints) {\n        useIdbfs = true;\n        idbfsMountpoints.forEach((mountpoint) => {\n            pyodide.FS.mkdir(mountpoint);\n            pyodide.FS.mount(pyodide.FS.filesystems.IDBFS, {}, mountpoint);\n        });\n        await new Promise((resolve, reject) => {\n            pyodide.FS.syncfs(true, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    if (nodefsMountpoints) {\n        Object.entries(nodefsMountpoints).forEach(([mountpoint, path]) => {\n            pyodide.FS.mkdir(mountpoint);\n            pyodide.FS.mount(pyodide.FS.filesystems.NODEFS, { root: path }, mountpoint);\n        });\n    }\n    // Mount files\n    onProgress(\"Mounting files.\");\n    const pythonFilePaths = [];\n    await Promise.all(Object.keys(files).map(async (path) => {\n        const file = files[path];\n        path = resolveAppPath(appId, path);\n        let data;\n        if (\"url\" in file) {\n            console.debug(`Fetch a file from ${file.url}`);\n            data = await fetch(file.url)\n                .then((res) => res.arrayBuffer())\n                .then((buffer) => new Uint8Array(buffer));\n        }\n        else {\n            data = file.data;\n        }\n        console.debug(`Write a file \"${path}\"`);\n        writeFileWithParents(pyodide, path, data, files.opts);\n        if (path.endsWith(\".py\")) {\n            pythonFilePaths.push(path);\n        }\n    }));\n    // Unpack archives\n    onProgress(\"Unpacking archives.\");\n    await Promise.all(archives.map(async (archive) => {\n        let buffer;\n        if (\"url\" in archive) {\n            console.debug(`Fetch an archive from ${archive.url}`);\n            buffer = await fetch(archive.url).then((res) => res.arrayBuffer());\n        }\n        else {\n            buffer = archive.buffer;\n        }\n        const { format, options } = archive;\n        console.debug(`Unpack an archive`, { format, options });\n        pyodide.unpackArchive(buffer, format, options);\n    }));\n    await pyodide.loadPackage(\"micropip\");\n    const micropip = pyodide.pyimport(\"micropip\");\n    onProgress(\"Mocking some packages.\");\n    console.debug(\"Mock pyarrow\");\n    mockPyArrow(pyodide);\n    console.debug(\"Mocked pyarrow\");\n    // NOTE: Installing packages must be AFTER restoring the archives\n    // because they may contain packages to be restored into the site-packages directory.\n    onProgress(\"Installing packages.\");\n    console.debug(\"Installing the prebuilt packages:\", prebuiltPackages);\n    await pyodide.loadPackage(prebuiltPackages);\n    console.debug(\"Installed the prebuilt packages\");\n    console.debug(\"Installing the requirements:\", requirements);\n    await micropip.install.callKwargs(requirements, { keep_going: true });\n    console.debug(\"Installed the requirements\");\n    if (moduleAutoLoad) {\n        const sources = pythonFilePaths.map((path) => pyodide.FS.readFile(path, { encoding: \"utf8\" }));\n        dispatchModuleAutoLoading(pyodide, onModuleAutoLoad, sources);\n    }\n    // The following code is necessary to avoid errors like `NameError: name '_imp' is not defined`\n    // at importing installed packages.\n    await pyodide.runPythonAsync(`\nimport importlib\nimportlib.invalidate_caches()\n`);\n    onProgress(\"Loading streamlit package.\");\n    console.debug(\"Loading the Streamlit package\");\n    // Importing the `streamlit` module takes most of the time,\n    // so we first run this step independently for clearer logs and easy exec-time profiling.\n    // For https://github.com/whitphx/stlite/issues/427\n    await pyodide.runPythonAsync(`\nimport streamlit.runtime\n  `);\n    console.debug(\"Loaded the Streamlit package\");\n    onProgress(\"Setting up the loggers.\");\n    console.debug(\"Setting the loggers\");\n    // Fix the Streamlit's logger instantiating strategy, which violates the standard and is problematic for us.\n    // See https://github.com/streamlit/streamlit/issues/4742\n    await pyodide.runPythonAsync(`\nimport logging\nimport streamlit.logger\n\nstreamlit.logger.get_logger = logging.getLogger\nstreamlit.logger.setup_formatter = None\nstreamlit.logger.update_formatter = lambda *a, **k: None\nstreamlit.logger.set_log_level = lambda *a, **k: None\n\nfor name in streamlit.logger._loggers.keys():\n    if name == \"root\":\n        name = \"streamlit\"\n    logger = logging.getLogger(name)\n    logger.propagate = True\n    logger.handlers.clear()\n    logger.setLevel(logging.NOTSET)\n\nstreamlit.logger._loggers = {}\n`);\n    // Then configure the logger.\n    const logCallback = (levelno, msg) => {\n        if (levelno >= 40) {\n            console.error(msg);\n        }\n        else if (levelno >= 30) {\n            console.warn(msg);\n        }\n        else if (levelno >= 20) {\n            console.info(msg);\n        }\n        else {\n            console.debug(msg);\n        }\n    };\n    const setupLoggers = pyodide.runPython(`\ndef __setup_loggers__(streamlit_level, streamlit_message_format, callback):\n    class JsHandler(logging.Handler):\n        def emit(self, record):\n            msg = self.format(record)\n            callback(record.levelno, msg)\n\n\n    root_message_format = \"%(levelname)s:%(name)s:%(message)s\"\n\n    root_logger = logging.getLogger()\n    root_logger.handlers.clear()\n    root_formatter = logging.Formatter(root_message_format)\n    root_handler = JsHandler()\n    root_handler.setFormatter(root_formatter)\n    root_logger.addHandler(root_handler)\n    root_logger.setLevel(logging.DEBUG)\n\n    streamlit_logger = logging.getLogger(\"streamlit\")\n    streamlit_logger.propagate = False\n    streamlit_logger.handlers.clear()\n    streamlit_formatter = logging.Formatter(streamlit_message_format)\n    streamlit_handler = JsHandler()\n    streamlit_handler.setFormatter(streamlit_formatter)\n    streamlit_logger.addHandler(streamlit_handler)\n    streamlit_logger.setLevel(streamlit_level.upper())\n\n__setup_loggers__`); // This last line evaluates to the function so it is returned from pyodide.runPython() to the JS side.\n    const streamlitLogLevel = (streamlitConfig?.[\"logger.level\"] ?? \"INFO\").toString();\n    const streamlitLogMessageFormat = streamlitConfig?.[\"logger.messageFormat\"] ?? \"%(asctime)s %(message)s\";\n    setupLoggers(streamlitLogLevel, streamlitLogMessageFormat, logCallback);\n    console.debug(\"Set the loggers\");\n    onProgress(\"Mocking some Streamlit functions for the browser environment.\");\n    console.debug(\"Mocking some Streamlit functions\");\n    // Disable caching. See https://github.com/whitphx/stlite/issues/495\n    await pyodide.runPythonAsync(`\nimport streamlit\n\ndef is_cacheable_msg(msg):\n  return False\n\nstreamlit.runtime.runtime.is_cacheable_msg = is_cacheable_msg\n`);\n    console.debug(\"Mocked some Streamlit functions\");\n    if (useIdbfs) {\n        onProgress(\"Setting up the IndexedDB filesystem synchronizer.\");\n        console.debug(\"Setting up the IndexedDB filesystem synchronizer\");\n        // IDBFS needs to be synced by calling `pyodide.FS.syncfs`.\n        // Ref: https://emscripten.org/docs/api_reference/Filesystem-API.html#filesystem-api-idbfs\n        let fsSyncing = false; // Sometimes `scriptFinishedCallback` is called many time at once so we avoid unnecessary simultaneous calls of `pyodide.FS.syncfs`.\n        const scriptFinishedCallback = () => {\n            console.debug(\"The script has finished. Syncing the filesystem.\");\n            if (!fsSyncing) {\n                fsSyncing = true;\n                pyodide.FS.syncfs(false, (err) => {\n                    fsSyncing = false;\n                    if (err) {\n                        console.error(err);\n                    }\n                });\n            }\n        };\n        // TODO: Run the callback only for the current app in the case of SharedWorker mode, where multiple runtimes exist.\n        // Monkey-patch the `AppSession._on_scriptrunner_event` method to call `scriptFinishedCallback` when the script is finished.\n        const setupScriptFinishedCallback = await pyodide.runPython(`\ndef __setup_script_finished_callback__(callback):\n    from streamlit.runtime.app_session import AppSession\n    from streamlit.runtime.scriptrunner import ScriptRunnerEvent\n\n    def wrap_app_session_on_scriptrunner_event(original_method):\n        def wrapped(self, *args, **kwargs):\n            if \"event\" in kwargs:\n                event = kwargs[\"event\"]\n                if event == ScriptRunnerEvent.SCRIPT_STOPPED_WITH_SUCCESS or event == ScriptRunnerEvent.SCRIPT_STOPPED_FOR_RERUN or event == ScriptRunnerEvent.SHUTDOWN:\n                    callback()\n            return original_method(self, *args, **kwargs)\n        return wrapped\n\n    AppSession._on_scriptrunner_event = wrap_app_session_on_scriptrunner_event(AppSession._on_scriptrunner_event)\n\n__setup_script_finished_callback__`); // This last line evaluates to the function so it is returned from pyodide.runPython() to the JS side.\n        setupScriptFinishedCallback(scriptFinishedCallback);\n        console.debug(\"Set up the IndexedDB filesystem synchronizer\");\n    }\n    if (languageServer) {\n        onProgress(\"Importing Language Server\");\n        await importLanguageServerLibraries(pyodide, micropip);\n    }\n    onProgress(\"Booting up the Streamlit server.\");\n    // The following Python code is based on streamlit.web.cli.main_run().\n    console.debug(\"Setting up the Streamlit configuration\");\n    const bootstrap = await pyodide.runPython(`\ndef __bootstrap__(main_script_path, flag_options, shared_worker_mode):\n    from stlite_lib.bootstrap import load_config_options, prepare\n\n    load_config_options(flag_options, shared_worker_mode)\n\n    prepare(main_script_path, [])\n\n__bootstrap__`); // This last line evaluates to the function so it is returned from pyodide.runPython() to the JS side.\n    const canonicalEntrypoint = resolveAppPath(appId, entrypoint);\n    const streamlitFlagOptions = {\n        // gatherUsageStats is disabled as default, but can be enabled explicitly by setting it to true.\n        \"browser.gatherUsageStats\": false,\n        ...streamlitConfig,\n        \"runner.fastReruns\": false, // Fast reruns do not work well with the async script runner of stlite. See https://github.com/whitphx/stlite/pull/550#issuecomment-1505485865.\n    };\n    const sharedWorkerMode = appId != null;\n    bootstrap(canonicalEntrypoint, pyodide.toPy(streamlitFlagOptions), sharedWorkerMode);\n    console.debug(\"Set up the Streamlit configuration\");\n    console.debug(\"Booting up the Streamlit server\");\n    const Server = pyodide.pyimport(\"stlite_lib.server.Server\");\n    const httpServer = Server(canonicalEntrypoint, appId ? getAppHomeDir(appId) : null);\n    await httpServer.start();\n    console.debug(\"Booted up the Streamlit server\");\n    return {\n        pyodide,\n        httpServer,\n        micropip,\n        initData,\n    };\n}\nexport function startWorkerEnv(defaultPyodideUrl, postMessage, presetInitialData, appId) {\n    function onProgress(message) {\n        postMessage({\n            type: \"event:progress\",\n            data: {\n                message,\n            },\n        });\n    }\n    const onModuleAutoLoad = (packagesToLoad, onLoad) => {\n        const channel = new MessageChannel();\n        postMessage({\n            type: \"event:moduleAutoLoad\",\n            data: {\n                packagesToLoad,\n            },\n        }, channel.port2);\n        onLoad\n            .then((loadedPackages) => {\n            channel.port1.postMessage({\n                type: \"moduleAutoLoad:success\",\n                data: {\n                    loadedPackages,\n                },\n            });\n            channel.port1.close();\n        })\n            .catch((err) => {\n            channel.port1.postMessage({\n                type: \"moduleAutoLoad:error\",\n                error: err,\n            });\n            channel.port1.close();\n            throw err;\n        });\n    };\n    let pyodideReadyPromise = null;\n    /**\n     * Process a message sent to the worker.\n     *\n     * @param event The message event to process\n     */\n    const onmessage = async (event) => {\n        const msg = event.data;\n        // Special case for transmitting the initial data\n        if (msg.type === \"initData\") {\n            const initialDataFromMessage = msg.data;\n            const initData = {\n                ...presetInitialData,\n                ...initialDataFromMessage,\n            };\n            console.debug(\"Initial data\", initData);\n            pyodideReadyPromise = loadPyodideAndPackages(defaultPyodideUrl, appId, initData, onModuleAutoLoad, onProgress);\n            pyodideReadyPromise\n                .then(() => {\n                postMessage({\n                    type: \"event:loaded\",\n                });\n            })\n                .catch((error) => {\n                console.error(error);\n                postMessage({\n                    type: \"event:error\",\n                    data: {\n                        error,\n                    },\n                });\n            });\n            return;\n        }\n        if (!pyodideReadyPromise) {\n            throw new Error(\"Pyodide initialization has not been started yet.\");\n        }\n        const v = await pyodideReadyPromise;\n        const pyodide = v.pyodide;\n        let httpServer = v.httpServer;\n        const micropip = v.micropip;\n        const { moduleAutoLoad } = v.initData;\n        const messagePort = event.ports[0];\n        function reply(message) {\n            messagePort.postMessage(message);\n        }\n        try {\n            switch (msg.type) {\n                case \"reboot\": {\n                    console.debug(\"Reboot the Streamlit server\", msg.data);\n                    const { entrypoint } = msg.data;\n                    httpServer.stop();\n                    console.debug(\"Booting up the Streamlit server\");\n                    const canonicalEntrypoint = resolveAppPath(appId, entrypoint);\n                    const Server = pyodide.pyimport(\"stlite_lib.server.Server\");\n                    httpServer = Server(canonicalEntrypoint);\n                    httpServer.start();\n                    console.debug(\"Booted up the Streamlit server\");\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"websocket:connect\": {\n                    console.debug(\"websocket:connect\", msg.data);\n                    const { path } = msg.data;\n                    httpServer.start_websocket(path, (message, binary) => {\n                        // XXX: Now there is no session mechanism\n                        if (binary) {\n                            const messageProxy = message;\n                            const buffer = messageProxy.getBuffer(\"u8\");\n                            messageProxy.destroy();\n                            const payload = new Uint8ClampedArray(buffer.data.buffer, buffer.data.byteOffset, buffer.data.byteLength);\n                            postMessage({\n                                type: \"websocket:message\",\n                                data: {\n                                    payload: new Uint8Array(payload),\n                                },\n                            });\n                        }\n                        else {\n                            const messageStr = message;\n                            postMessage({\n                                type: \"websocket:message\",\n                                data: {\n                                    payload: messageStr,\n                                },\n                            });\n                        }\n                    });\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"websocket:send\": {\n                    console.debug(\"websocket:send\", msg.data);\n                    const { payload } = msg.data;\n                    httpServer.receive_websocket_from_js(payload);\n                    break;\n                }\n                case \"http:request\": {\n                    console.debug(\"http:request\", msg.data);\n                    const { request } = msg.data;\n                    const onResponse = (statusCode, _headers, _body) => {\n                        const headers = new Map(_headers.toJs()); // Pyodide converts dict to LiteralMap, not Map, which can't be cloned and sent to the main thread. So we convert it to Map here. Ref: https://github.com/pyodide/pyodide/pull/4576\n                        const body = _body.toJs();\n                        console.debug({ statusCode, headers, body });\n                        reply({\n                            type: \"http:response\",\n                            data: {\n                                response: {\n                                    statusCode,\n                                    headers,\n                                    body,\n                                },\n                            },\n                        });\n                    };\n                    httpServer.receive_http_from_js(request.method, decodeURIComponent(request.path), request.headers, request.body, onResponse);\n                    break;\n                }\n                case \"file:write\": {\n                    const { path: rawPath, data: fileData, opts } = msg.data;\n                    const path = resolveAppPath(appId, rawPath);\n                    if (moduleAutoLoad &&\n                        typeof fileData === \"string\" &&\n                        path.endsWith(\".py\")) {\n                        // Auto-install must be dispatched before writing the file\n                        // because its promise should be set before saving the file triggers rerunning.\n                        console.debug(`Auto install the requirements in ${path}`);\n                        dispatchModuleAutoLoading(pyodide, onModuleAutoLoad, [fileData]);\n                    }\n                    console.debug(`Write a file \"${path}\"`);\n                    writeFileWithParents(pyodide, path, fileData, opts);\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"file:rename\": {\n                    const { oldPath: rawOldPath, newPath: rawNewPath } = msg.data;\n                    const oldPath = resolveAppPath(appId, rawOldPath);\n                    const newPath = resolveAppPath(appId, rawNewPath);\n                    console.debug(`Rename \"${oldPath}\" to ${newPath}`);\n                    renameWithParents(pyodide, oldPath, newPath);\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"file:unlink\": {\n                    const { path: rawPath } = msg.data;\n                    const path = resolveAppPath(appId, rawPath);\n                    console.debug(`Remove \"${path}`);\n                    pyodide.FS.unlink(path);\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"file:read\": {\n                    const { path, opts } = msg.data;\n                    console.debug(`Read \"${path}\"`);\n                    const content = pyodide.FS.readFile(path, opts);\n                    reply({\n                        type: \"reply:file:read\",\n                        data: {\n                            content,\n                        },\n                    });\n                    break;\n                }\n                case \"install\": {\n                    const { requirements: unvalidatedRequirements } = msg.data;\n                    const requirements = validateRequirements(unvalidatedRequirements); // Blocks the not allowed wheel URL schemes.\n                    console.debug(\"Install the requirements:\", requirements);\n                    await micropip.install\n                        .callKwargs(requirements, { keep_going: true })\n                        .then(() => {\n                        console.debug(\"Successfully installed\");\n                        reply({\n                            type: \"reply\",\n                        });\n                    });\n                    break;\n                }\n                case \"setEnv\": {\n                    const { env } = msg.data;\n                    const os = pyodide.pyimport(\"os\");\n                    os.environ.update(pyodide.toPy(env));\n                    console.debug(\"Successfully set the environment variables\", env);\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"language-server:code_completion\": {\n                    const codeCompletions = await getCodeCompletions(msg.data, pyodide);\n                    reply({\n                        type: \"reply:language-server:code_completion\",\n                        data: codeCompletions,\n                    });\n                    break;\n                }\n            }\n        }\n        catch (error) {\n            console.error(error);\n            if (!(error instanceof Error)) {\n                throw error;\n            }\n            // The `error` object may contain non-serializable properties such as function (for example Pyodide.FS.ErrnoError which has a `.setErrno` function),\n            // so it must be converted to a plain object before sending it to the main thread.\n            // Otherwise, the following error will be thrown:\n            // `Uncaught (in promise) DOMException: Failed to execute 'postMessage' on 'MessagePort': #<Object> could not be cloned.`\n            // Also, the JSON.stringify() and JSON.parse() approach like https://stackoverflow.com/a/42376465/13103190\n            // does not work for Error objects because the Error object is not enumerable.\n            // So we use the following approach to clone the Error object.\n            const cloneableError = new Error(error.message);\n            cloneableError.name = error.name;\n            cloneableError.stack = error.stack;\n            reply({\n                type: \"reply\",\n                error: cloneableError,\n            });\n        }\n    };\n    postMessage({\n        type: \"event:start\",\n    });\n    return onmessage;\n}\n//# sourceMappingURL=worker-runtime.js.map","const charset = \"abcdefghijklmnopqrstuvwxyz\";\nconst charsetSize = charset.length;\n// This is not cryptographically secure, but it's good enough for our use case.\nexport function generateRandomAppId(length) {\n    let id = \"\";\n    for (let i = 0; i < length; i++) {\n        const randomIndex = Math.floor(Math.random() * charsetSize);\n        id += charset[randomIndex];\n    }\n    return id;\n}\n//# sourceMappingURL=app-id.js.map","/// <reference lib=\"WebWorker\" />\nimport { startWorkerEnv } from \"./worker-runtime\";\nimport { generateRandomAppId } from \"./app-id\";\nconst pyodideUrl = \"https://cdn.jsdelivr.net/pyodide/v0.27.3/full/pyodide.mjs\";\nif (\"postMessage\" in self) {\n    // Dedicated worker\n    self.onmessage = startWorkerEnv(pyodideUrl, (event, port) => port\n        ? self.postMessage(event, [port])\n        : self.postMessage(event));\n}\nelse {\n    // Shared worker\n    const existingAppIds = [];\n    self.onconnect = (event) => {\n        // Generate app ID and ensure it's unique.\n        let appId;\n        do {\n            appId = generateRandomAppId(4);\n        } while (existingAppIds.includes(appId));\n        existingAppIds.push(appId);\n        console.debug(\"SharedWorker mode.\", { appId });\n        const sharedWorkerPort = event.ports[0];\n        sharedWorkerPort.onmessage = startWorkerEnv(pyodideUrl, (event, port) => port\n            ? sharedWorkerPort.postMessage(event, [port])\n            : sharedWorkerPort.postMessage(event), undefined, appId);\n        sharedWorkerPort.start();\n    };\n}\n//# sourceMappingURL=worker.js.map"],"names":["assertPath","path","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","code","i","lastSlashIndex","_format","sep","pathObject","dir","base","posix","resolvedPath","resolvedAbsolute","cwd","isAbsolute","trailingSeparator","joined","arg","from","to","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","length","lastCommonSep","fromCode","toCode","out","hasRoot","end","matchedSlash","ext","start","extIdx","firstNonSlashEnd","startDot","startPart","preDotState","ret","pathBrowserify","globalHomeDir","getAppHomeDir","appId","resolveAppPath","filePath","ensureParent","pyodide","normalized","dirNames","chDirNames","dirName","dirPath","err","writeFileWithParents","data","opts","renameWithParents","oldPath","newPath","FIRST_CHAR_OF_EXTRAS","FIRST_CHAR_OF_VERSIONSPEC","FIRST_CHAR_OF_QUOTED_MARKER","FIRST_CHAR_OF_URLSPEC","RX_CHAR_FOLLOWING_NAME_WITHOUT_WSP","getPackageName","req","validateRequirements","requirements","url","resolvePyodideUrl","pyodideUrl","isNode","pyodideIndexURL","nodePath","nodeUrl","initPyodide","loadPyodideOptions","scriptURL","isESModule","loadPyodide","mockPyArrow","tryModuleAutoLoad","callback","sources","pyodidePy","findImports","source","importsArr","packagesToLoad","name","packageLoadPromise","dispatchModuleAutoLoading","autoLoadPromise","defineCodeCompletionsFunction","getCodeCompletions","payload","get_code_completions","result","importLanguageServerLibraries","micropip","initPyodidePromise","loadPyodideAndPackages","defaultPyodideUrl","initData","onModuleAutoLoad","onProgress","entrypoint","files","archives","unvalidatedRequirements","prebuiltPackages","wheels","streamlitConfig","idbfsMountpoints","nodefsMountpoints","moduleAutoLoad","env","languageServer","os","useIdbfs","mountpoint","resolve","reject","pythonFilePaths","file","buffer","archive","format","options","logCallback","levelno","msg","setupLoggers","streamlitLogLevel","streamlitLogMessageFormat","fsSyncing","scriptFinishedCallback","bootstrap","canonicalEntrypoint","streamlitFlagOptions","sharedWorkerMode","httpServer","startWorkerEnv","postMessage","presetInitialData","message","onLoad","channel","loadedPackages","pyodideReadyPromise","onmessage","event","initialDataFromMessage","error","v","messagePort","reply","binary","messageProxy","request","onResponse","statusCode","_headers","_body","headers","body","rawPath","fileData","rawOldPath","rawNewPath","content","codeCompletions","cloneableError","charset","charsetSize","generateRandomAppId","id","randomIndex","port","existingAppIds","sharedWorkerPort"],"mappings":"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","x_google_ignoreList":[0]}